<?php
/**
 * AvaConversionApi
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.30.6
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.30.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dangl\AVACloud\ApiException;
use Dangl\AVACloud\Configuration;
use Dangl\AVACloud\HeaderSelector;
use Dangl\AVACloud\ObjectSerializer;

/**
 * AvaConversionApi Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvaConversionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation avaConversionConvertToAva
     *
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dangl\AVACloud\Model\ProjectDto
     */
    public function avaConversionConvertToAva($ava_project, $try_auto_generate_item_numbers_and_schema = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null)
    {
        list($response) = $this->avaConversionConvertToAvaWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $remove_plain_text_long_texts, $remove_html_long_texts);
        return $response;
    }

    /**
     * Operation avaConversionConvertToAvaWithHttpInfo
     *
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dangl\AVACloud\Model\ProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToAvaWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null)
    {
        $returnType = '\Dangl\AVACloud\Model\ProjectDto';
        $request = $this->avaConversionConvertToAvaRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $remove_plain_text_long_texts, $remove_html_long_texts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToAvaAsync
     *
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToAvaAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null)
    {
        return $this->avaConversionConvertToAvaAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $remove_plain_text_long_texts, $remove_html_long_texts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToAvaAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToAvaAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null)
    {
        $returnType = '\Dangl\AVACloud\Model\ProjectDto';
        $request = $this->avaConversionConvertToAvaRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $remove_plain_text_long_texts, $remove_html_long_texts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToAva'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToAvaRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToAva'
            );
        }

        $resourcePath = '/conversion/ava/ava';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }
        // query params
        if ($remove_plain_text_long_texts !== null) {
            $queryParams['RemovePlainTextLongTexts'] = ObjectSerializer::toQueryValue($remove_plain_text_long_texts);
        }
        // query params
        if ($remove_html_long_texts !== null) {
            $queryParams['RemoveHtmlLongTexts'] = ObjectSerializer::toQueryValue($remove_html_long_texts);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.com.dangl-it.ProjectDto.v1+json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.com.dangl-it.ProjectDto.v1+json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation avaConversionConvertToExcel
     *
     * Converts Dangl.AVA projects to Excel
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function avaConversionConvertToExcel($ava_project, $try_auto_generate_item_numbers_and_schema = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null)
    {
        list($response) = $this->avaConversionConvertToExcelWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $write_prices, $write_long_texts, $conversion_culture);
        return $response;
    }

    /**
     * Operation avaConversionConvertToExcelWithHttpInfo
     *
     * Converts Dangl.AVA projects to Excel
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToExcelWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToExcelRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $write_prices, $write_long_texts, $conversion_culture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToExcelAsync
     *
     * Converts Dangl.AVA projects to Excel
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToExcelAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null)
    {
        return $this->avaConversionConvertToExcelAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $write_prices, $write_long_texts, $conversion_culture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToExcelAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to Excel
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToExcelAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToExcelRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $write_prices, $write_long_texts, $conversion_culture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToExcel'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToExcelRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToExcel'
            );
        }

        $resourcePath = '/conversion/ava/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }
        // query params
        if ($write_prices !== null) {
            $queryParams['WritePrices'] = ObjectSerializer::toQueryValue($write_prices);
        }
        // query params
        if ($write_long_texts !== null) {
            $queryParams['WriteLongTexts'] = ObjectSerializer::toQueryValue($write_long_texts);
        }
        // query params
        if ($conversion_culture !== null) {
            $queryParams['ConversionCulture'] = ObjectSerializer::toQueryValue($conversion_culture);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation avaConversionConvertToGaeb
     *
     * Converts Dangl.AVA projects to GAEB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function avaConversionConvertToGaeb($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null)
    {
        list($response) = $this->avaConversionConvertToGaebWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions);
        return $response;
    }

    /**
     * Operation avaConversionConvertToGaebWithHttpInfo
     *
     * Converts Dangl.AVA projects to GAEB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToGaebWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToGaebRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToGaebAsync
     *
     * Converts Dangl.AVA projects to GAEB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToGaebAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null)
    {
        return $this->avaConversionConvertToGaebAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToGaebAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to GAEB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToGaebAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToGaebRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToGaeb'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToGaebRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToGaeb'
            );
        }

        $resourcePath = '/conversion/ava/gaeb';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }
        // query params
        if ($destination_gaeb_type !== null) {
            $queryParams['DestinationGaebType'] = ObjectSerializer::toQueryValue($destination_gaeb_type);
        }
        // query params
        if ($target_exchange_phase_transform !== null) {
            $queryParams['TargetExchangePhaseTransform'] = ObjectSerializer::toQueryValue($target_exchange_phase_transform);
        }
        // query params
        if ($enforce_strict_offer_phase_long_text_output !== null) {
            $queryParams['EnforceStrictOfferPhaseLongTextOutput'] = ObjectSerializer::toQueryValue($enforce_strict_offer_phase_long_text_output);
        }
        // query params
        if ($export_quantity_determination !== null) {
            $queryParams['ExportQuantityDetermination'] = ObjectSerializer::toQueryValue($export_quantity_determination);
        }
        // query params
        if ($remove_unprintable_characters_from_texts !== null) {
            $queryParams['RemoveUnprintableCharactersFromTexts'] = ObjectSerializer::toQueryValue($remove_unprintable_characters_from_texts);
        }
        // query params
        if ($force_include_descriptions !== null) {
            $queryParams['ForceIncludeDescriptions'] = ObjectSerializer::toQueryValue($force_include_descriptions);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation avaConversionConvertToOenorm
     *
     * Converts Dangl.AVA projects to Oenorm
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function avaConversionConvertToOenorm($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null)
    {
        list($response) = $this->avaConversionConvertToOenormWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts);
        return $response;
    }

    /**
     * Operation avaConversionConvertToOenormWithHttpInfo
     *
     * Converts Dangl.AVA projects to Oenorm
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToOenormWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToOenormRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToOenormAsync
     *
     * Converts Dangl.AVA projects to Oenorm
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToOenormAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null)
    {
        return $this->avaConversionConvertToOenormAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToOenormAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to Oenorm
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToOenormAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToOenormRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToOenorm'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToOenormRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToOenorm'
            );
        }

        $resourcePath = '/conversion/ava/oenorm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }
        // query params
        if ($destination_oenorm_type !== null) {
            $queryParams['DestinationOenormType'] = ObjectSerializer::toQueryValue($destination_oenorm_type);
        }
        // query params
        if ($try_repair_project_structure !== null) {
            $queryParams['TryRepairProjectStructure'] = ObjectSerializer::toQueryValue($try_repair_project_structure);
        }
        // query params
        if ($skip_try_enforce_schema_compliant_xml_output !== null) {
            $queryParams['SkipTryEnforceSchemaCompliantXmlOutput'] = ObjectSerializer::toQueryValue($skip_try_enforce_schema_compliant_xml_output);
        }
        // query params
        if ($remove_unprintable_characters_from_texts !== null) {
            $queryParams['RemoveUnprintableCharactersFromTexts'] = ObjectSerializer::toQueryValue($remove_unprintable_characters_from_texts);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation avaConversionConvertToReb
     *
     * Converts Dangl.AVA projects to REB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_reb_type Defaults to D11 (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function avaConversionConvertToReb($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_reb_type = null)
    {
        list($response) = $this->avaConversionConvertToRebWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_reb_type);
        return $response;
    }

    /**
     * Operation avaConversionConvertToRebWithHttpInfo
     *
     * Converts Dangl.AVA projects to REB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_reb_type Defaults to D11 (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToRebWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_reb_type = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToRebRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_reb_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToRebAsync
     *
     * Converts Dangl.AVA projects to REB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_reb_type Defaults to D11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToRebAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_reb_type = null)
    {
        return $this->avaConversionConvertToRebAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_reb_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToRebAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to REB
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_reb_type Defaults to D11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToRebAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_reb_type = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToRebRequest($ava_project, $try_auto_generate_item_numbers_and_schema, $destination_reb_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToReb'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param  string $destination_reb_type Defaults to D11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToRebRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null, $destination_reb_type = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToReb'
            );
        }

        $resourcePath = '/conversion/ava/reb';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }
        // query params
        if ($destination_reb_type !== null) {
            $queryParams['DestinationRebType'] = ObjectSerializer::toQueryValue($destination_reb_type);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation avaConversionConvertToSia
     *
     * Converts Dangl.AVA projects to SIA 451
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function avaConversionConvertToSia($ava_project, $try_auto_generate_item_numbers_and_schema = null)
    {
        list($response) = $this->avaConversionConvertToSiaWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema);
        return $response;
    }

    /**
     * Operation avaConversionConvertToSiaWithHttpInfo
     *
     * Converts Dangl.AVA projects to SIA 451
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function avaConversionConvertToSiaWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToSiaRequest($ava_project, $try_auto_generate_item_numbers_and_schema);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation avaConversionConvertToSiaAsync
     *
     * Converts Dangl.AVA projects to SIA 451
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToSiaAsync($ava_project, $try_auto_generate_item_numbers_and_schema = null)
    {
        return $this->avaConversionConvertToSiaAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation avaConversionConvertToSiaAsyncWithHttpInfo
     *
     * Converts Dangl.AVA projects to SIA 451
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function avaConversionConvertToSiaAsyncWithHttpInfo($ava_project, $try_auto_generate_item_numbers_and_schema = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->avaConversionConvertToSiaRequest($ava_project, $try_auto_generate_item_numbers_and_schema);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'avaConversionConvertToSia'
     *
     * @param  \Dangl\AVACloud\Model\ProjectDto $ava_project The Dangl.AVA project (required)
     * @param  bool $try_auto_generate_item_numbers_and_schema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function avaConversionConvertToSiaRequest($ava_project, $try_auto_generate_item_numbers_and_schema = null)
    {
        // verify the required parameter 'ava_project' is set
        if ($ava_project === null || (is_array($ava_project) && count($ava_project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ava_project when calling avaConversionConvertToSia'
            );
        }

        $resourcePath = '/conversion/ava/sia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($try_auto_generate_item_numbers_and_schema !== null) {
            $queryParams['TryAutoGenerateItemNumbersAndSchema'] = ObjectSerializer::toQueryValue($try_auto_generate_item_numbers_and_schema);
        }


        // body params
        $_tempBody = null;
        if (isset($ava_project)) {
            $_tempBody = $ava_project;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
