<?php
/**
 * GaebConversionApi
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.41.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dangl\AVACloud\ApiException;
use Dangl\AVACloud\Configuration;
use Dangl\AVACloud\HeaderSelector;
use Dangl\AVACloud\ObjectSerializer;

/**
 * GaebConversionApi Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GaebConversionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation gaebConversionConvertToAva
     *
     * Converts GAEB files to Dangl.AVA projects
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Dangl\AVACloud\Model\ProjectDto
     */
    public function gaebConversionConvertToAva($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        list($response) = $this->gaebConversionConvertToAvaWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $remove_plain_text_long_texts, $remove_html_long_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);
        return $response;
    }

    /**
     * Operation gaebConversionConvertToAvaWithHttpInfo
     *
     * Converts GAEB files to Dangl.AVA projects
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Dangl\AVACloud\Model\ProjectDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function gaebConversionConvertToAvaWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\Dangl\AVACloud\Model\ProjectDto';
        $request = $this->gaebConversionConvertToAvaRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $remove_plain_text_long_texts, $remove_html_long_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ProjectDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gaebConversionConvertToAvaAsync
     *
     * Converts GAEB files to Dangl.AVA projects
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToAvaAsync($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        return $this->gaebConversionConvertToAvaAsyncWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $remove_plain_text_long_texts, $remove_html_long_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gaebConversionConvertToAvaAsyncWithHttpInfo
     *
     * Converts GAEB files to Dangl.AVA projects
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToAvaAsyncWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\Dangl\AVACloud\Model\ProjectDto';
        $request = $this->gaebConversionConvertToAvaRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $remove_plain_text_long_texts, $remove_html_long_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gaebConversionConvertToAva'
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $remove_plain_text_long_texts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $remove_html_long_texts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gaebConversionConvertToAvaRequest($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $remove_plain_text_long_texts = null, $remove_html_long_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {

        $resourcePath = '/conversion/gaeb/ava';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($support_skipped_item_number_levels_in_positions !== null) {
            $queryParams['SupportSkippedItemNumberLevelsInPositions'] = ObjectSerializer::toQueryValue($support_skipped_item_number_levels_in_positions);
        }
        // query params
        if ($remove_plain_text_long_texts !== null) {
            $queryParams['RemovePlainTextLongTexts'] = ObjectSerializer::toQueryValue($remove_plain_text_long_texts);
        }
        // query params
        if ($remove_html_long_texts !== null) {
            $queryParams['RemoveHtmlLongTexts'] = ObjectSerializer::toQueryValue($remove_html_long_texts);
        }
        // query params
        if ($output_html_as_xml !== null) {
            $queryParams['OutputHtmlAsXml'] = ObjectSerializer::toQueryValue($output_html_as_xml);
        }
        // query params
        if ($keep_empty_html_text !== null) {
            $queryParams['KeepEmptyHtmlText'] = ObjectSerializer::toQueryValue($keep_empty_html_text);
        }
        // query params
        if ($allow_upper_case_item_numbers !== null) {
            $queryParams['AllowUpperCaseItemNumbers'] = ObjectSerializer::toQueryValue($allow_upper_case_item_numbers);
        }


        // form params
        if ($gaeb_file !== null) {
            $multipart = true;
            $formParams['gaebFile'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($gaeb_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.com.dangl-it.ProjectDto.v1+json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.com.dangl-it.ProjectDto.v1+json', 'application/problem+json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gaebConversionConvertToExcel
     *
     * Converts GAEB files to Excel
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function gaebConversionConvertToExcel($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        list($response) = $this->gaebConversionConvertToExcelWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $write_prices, $write_long_texts, $conversion_culture, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);
        return $response;
    }

    /**
     * Operation gaebConversionConvertToExcelWithHttpInfo
     *
     * Converts GAEB files to Excel
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function gaebConversionConvertToExcelWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToExcelRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $write_prices, $write_long_texts, $conversion_culture, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gaebConversionConvertToExcelAsync
     *
     * Converts GAEB files to Excel
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToExcelAsync($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        return $this->gaebConversionConvertToExcelAsyncWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $write_prices, $write_long_texts, $conversion_culture, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gaebConversionConvertToExcelAsyncWithHttpInfo
     *
     * Converts GAEB files to Excel
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToExcelAsyncWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToExcelRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $write_prices, $write_long_texts, $conversion_culture, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gaebConversionConvertToExcel'
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  bool $write_prices Defaults to true (optional)
     * @param  bool $write_long_texts Defaults to true (optional)
     * @param  string $conversion_culture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gaebConversionConvertToExcelRequest($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $write_prices = null, $write_long_texts = null, $conversion_culture = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {

        $resourcePath = '/conversion/gaeb/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($support_skipped_item_number_levels_in_positions !== null) {
            $queryParams['SupportSkippedItemNumberLevelsInPositions'] = ObjectSerializer::toQueryValue($support_skipped_item_number_levels_in_positions);
        }
        // query params
        if ($write_prices !== null) {
            $queryParams['WritePrices'] = ObjectSerializer::toQueryValue($write_prices);
        }
        // query params
        if ($write_long_texts !== null) {
            $queryParams['WriteLongTexts'] = ObjectSerializer::toQueryValue($write_long_texts);
        }
        // query params
        if ($conversion_culture !== null) {
            $queryParams['ConversionCulture'] = ObjectSerializer::toQueryValue($conversion_culture);
        }
        // query params
        if ($output_html_as_xml !== null) {
            $queryParams['OutputHtmlAsXml'] = ObjectSerializer::toQueryValue($output_html_as_xml);
        }
        // query params
        if ($keep_empty_html_text !== null) {
            $queryParams['KeepEmptyHtmlText'] = ObjectSerializer::toQueryValue($keep_empty_html_text);
        }
        // query params
        if ($allow_upper_case_item_numbers !== null) {
            $queryParams['AllowUpperCaseItemNumbers'] = ObjectSerializer::toQueryValue($allow_upper_case_item_numbers);
        }


        // form params
        if ($gaeb_file !== null) {
            $multipart = true;
            $formParams['gaebFile'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($gaeb_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gaebConversionConvertToGaeb
     *
     * Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param  bool $treat_null_item_number_schema_as_invalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function gaebConversionConvertToGaeb($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null, $treat_null_item_number_schema_as_invalid = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        list($response) = $this->gaebConversionConvertToGaebWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions, $treat_null_item_number_schema_as_invalid, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);
        return $response;
    }

    /**
     * Operation gaebConversionConvertToGaebWithHttpInfo
     *
     * Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param  bool $treat_null_item_number_schema_as_invalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function gaebConversionConvertToGaebWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null, $treat_null_item_number_schema_as_invalid = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToGaebRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions, $treat_null_item_number_schema_as_invalid, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gaebConversionConvertToGaebAsync
     *
     * Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param  bool $treat_null_item_number_schema_as_invalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToGaebAsync($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null, $treat_null_item_number_schema_as_invalid = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        return $this->gaebConversionConvertToGaebAsyncWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions, $treat_null_item_number_schema_as_invalid, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gaebConversionConvertToGaebAsyncWithHttpInfo
     *
     * Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param  bool $treat_null_item_number_schema_as_invalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToGaebAsyncWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null, $treat_null_item_number_schema_as_invalid = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToGaebRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_gaeb_type, $target_exchange_phase_transform, $enforce_strict_offer_phase_long_text_output, $export_quantity_determination, $remove_unprintable_characters_from_texts, $force_include_descriptions, $treat_null_item_number_schema_as_invalid, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gaebConversionConvertToGaeb'
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_gaeb_type Defaults to GAEB XML V3.2 (optional)
     * @param  string $target_exchange_phase_transform Defaults to none, meaning no transformation will be done (optional)
     * @param  bool $enforce_strict_offer_phase_long_text_output Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param  bool $export_quantity_determination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $force_include_descriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param  bool $treat_null_item_number_schema_as_invalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gaebConversionConvertToGaebRequest($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_gaeb_type = null, $target_exchange_phase_transform = null, $enforce_strict_offer_phase_long_text_output = null, $export_quantity_determination = null, $remove_unprintable_characters_from_texts = null, $force_include_descriptions = null, $treat_null_item_number_schema_as_invalid = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {

        $resourcePath = '/conversion/gaeb/gaeb';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($support_skipped_item_number_levels_in_positions !== null) {
            $queryParams['SupportSkippedItemNumberLevelsInPositions'] = ObjectSerializer::toQueryValue($support_skipped_item_number_levels_in_positions);
        }
        // query params
        if ($destination_gaeb_type !== null) {
            $queryParams['DestinationGaebType'] = ObjectSerializer::toQueryValue($destination_gaeb_type);
        }
        // query params
        if ($target_exchange_phase_transform !== null) {
            $queryParams['TargetExchangePhaseTransform'] = ObjectSerializer::toQueryValue($target_exchange_phase_transform);
        }
        // query params
        if ($enforce_strict_offer_phase_long_text_output !== null) {
            $queryParams['EnforceStrictOfferPhaseLongTextOutput'] = ObjectSerializer::toQueryValue($enforce_strict_offer_phase_long_text_output);
        }
        // query params
        if ($export_quantity_determination !== null) {
            $queryParams['ExportQuantityDetermination'] = ObjectSerializer::toQueryValue($export_quantity_determination);
        }
        // query params
        if ($remove_unprintable_characters_from_texts !== null) {
            $queryParams['RemoveUnprintableCharactersFromTexts'] = ObjectSerializer::toQueryValue($remove_unprintable_characters_from_texts);
        }
        // query params
        if ($force_include_descriptions !== null) {
            $queryParams['ForceIncludeDescriptions'] = ObjectSerializer::toQueryValue($force_include_descriptions);
        }
        // query params
        if ($treat_null_item_number_schema_as_invalid !== null) {
            $queryParams['TreatNullItemNumberSchemaAsInvalid'] = ObjectSerializer::toQueryValue($treat_null_item_number_schema_as_invalid);
        }
        // query params
        if ($output_html_as_xml !== null) {
            $queryParams['OutputHtmlAsXml'] = ObjectSerializer::toQueryValue($output_html_as_xml);
        }
        // query params
        if ($keep_empty_html_text !== null) {
            $queryParams['KeepEmptyHtmlText'] = ObjectSerializer::toQueryValue($keep_empty_html_text);
        }
        // query params
        if ($allow_upper_case_item_numbers !== null) {
            $queryParams['AllowUpperCaseItemNumbers'] = ObjectSerializer::toQueryValue($allow_upper_case_item_numbers);
        }


        // form params
        if ($gaeb_file !== null) {
            $multipart = true;
            $formParams['gaebFile'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($gaeb_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gaebConversionConvertToOenorm
     *
     * Converts GAEB files to Oenorm files
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function gaebConversionConvertToOenorm($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        list($response) = $this->gaebConversionConvertToOenormWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);
        return $response;
    }

    /**
     * Operation gaebConversionConvertToOenormWithHttpInfo
     *
     * Converts GAEB files to Oenorm files
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \Dangl\AVACloud\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function gaebConversionConvertToOenormWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToOenormRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dangl\AVACloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gaebConversionConvertToOenormAsync
     *
     * Converts GAEB files to Oenorm files
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToOenormAsync($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        return $this->gaebConversionConvertToOenormAsyncWithHttpInfo($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gaebConversionConvertToOenormAsyncWithHttpInfo
     *
     * Converts GAEB files to Oenorm files
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gaebConversionConvertToOenormAsyncWithHttpInfo($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->gaebConversionConvertToOenormRequest($gaeb_file, $support_skipped_item_number_levels_in_positions, $destination_oenorm_type, $try_repair_project_structure, $skip_try_enforce_schema_compliant_xml_output, $remove_unprintable_characters_from_texts, $output_html_as_xml, $keep_empty_html_text, $allow_upper_case_item_numbers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gaebConversionConvertToOenorm'
     *
     * @param  \SplFileObject $gaeb_file The input file (optional)
     * @param  bool $support_skipped_item_number_levels_in_positions Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true. (optional)
     * @param  string $destination_oenorm_type Defaults to Lv2015 (optional)
     * @param  bool $try_repair_project_structure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param  bool $skip_try_enforce_schema_compliant_xml_output If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param  bool $remove_unprintable_characters_from_texts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param  bool $output_html_as_xml Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;. (optional)
     * @param  bool $keep_empty_html_text Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output. (optional)
     * @param  bool $allow_upper_case_item_numbers Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function gaebConversionConvertToOenormRequest($gaeb_file = null, $support_skipped_item_number_levels_in_positions = null, $destination_oenorm_type = null, $try_repair_project_structure = null, $skip_try_enforce_schema_compliant_xml_output = null, $remove_unprintable_characters_from_texts = null, $output_html_as_xml = null, $keep_empty_html_text = null, $allow_upper_case_item_numbers = null)
    {

        $resourcePath = '/conversion/gaeb/oenorm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($support_skipped_item_number_levels_in_positions !== null) {
            $queryParams['SupportSkippedItemNumberLevelsInPositions'] = ObjectSerializer::toQueryValue($support_skipped_item_number_levels_in_positions);
        }
        // query params
        if ($destination_oenorm_type !== null) {
            $queryParams['DestinationOenormType'] = ObjectSerializer::toQueryValue($destination_oenorm_type);
        }
        // query params
        if ($try_repair_project_structure !== null) {
            $queryParams['TryRepairProjectStructure'] = ObjectSerializer::toQueryValue($try_repair_project_structure);
        }
        // query params
        if ($skip_try_enforce_schema_compliant_xml_output !== null) {
            $queryParams['SkipTryEnforceSchemaCompliantXmlOutput'] = ObjectSerializer::toQueryValue($skip_try_enforce_schema_compliant_xml_output);
        }
        // query params
        if ($remove_unprintable_characters_from_texts !== null) {
            $queryParams['RemoveUnprintableCharactersFromTexts'] = ObjectSerializer::toQueryValue($remove_unprintable_characters_from_texts);
        }
        // query params
        if ($output_html_as_xml !== null) {
            $queryParams['OutputHtmlAsXml'] = ObjectSerializer::toQueryValue($output_html_as_xml);
        }
        // query params
        if ($keep_empty_html_text !== null) {
            $queryParams['KeepEmptyHtmlText'] = ObjectSerializer::toQueryValue($keep_empty_html_text);
        }
        // query params
        if ($allow_upper_case_item_numbers !== null) {
            $queryParams['AllowUpperCaseItemNumbers'] = ObjectSerializer::toQueryValue($allow_upper_case_item_numbers);
        }


        // form params
        if ($gaeb_file !== null) {
            $multipart = true;
            $formParams['gaebFile'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($gaeb_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/problem+json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
