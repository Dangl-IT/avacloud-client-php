<?php
/**
 * References
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * References Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class References implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'References';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer_reference' => 'string',
        'project_reference' => 'string',
        'contract_reference' => 'string',
        'purchase_order_reference' => 'string',
        'sales_order_reference' => 'string',
        'receiving_advice_reference' => 'string',
        'dispatch_advice_reference' => 'string',
        'tender_or_lot_reference' => 'string',
        'invoiced_object_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer_reference' => null,
        'project_reference' => null,
        'contract_reference' => null,
        'purchase_order_reference' => null,
        'sales_order_reference' => null,
        'receiving_advice_reference' => null,
        'dispatch_advice_reference' => null,
        'tender_or_lot_reference' => null,
        'invoiced_object_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer_reference' => 'buyerReference',
        'project_reference' => 'projectReference',
        'contract_reference' => 'contractReference',
        'purchase_order_reference' => 'purchaseOrderReference',
        'sales_order_reference' => 'salesOrderReference',
        'receiving_advice_reference' => 'receivingAdviceReference',
        'dispatch_advice_reference' => 'dispatchAdviceReference',
        'tender_or_lot_reference' => 'tenderOrLotReference',
        'invoiced_object_identifier' => 'invoicedObjectIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer_reference' => 'setBuyerReference',
        'project_reference' => 'setProjectReference',
        'contract_reference' => 'setContractReference',
        'purchase_order_reference' => 'setPurchaseOrderReference',
        'sales_order_reference' => 'setSalesOrderReference',
        'receiving_advice_reference' => 'setReceivingAdviceReference',
        'dispatch_advice_reference' => 'setDispatchAdviceReference',
        'tender_or_lot_reference' => 'setTenderOrLotReference',
        'invoiced_object_identifier' => 'setInvoicedObjectIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer_reference' => 'getBuyerReference',
        'project_reference' => 'getProjectReference',
        'contract_reference' => 'getContractReference',
        'purchase_order_reference' => 'getPurchaseOrderReference',
        'sales_order_reference' => 'getSalesOrderReference',
        'receiving_advice_reference' => 'getReceivingAdviceReference',
        'dispatch_advice_reference' => 'getDispatchAdviceReference',
        'tender_or_lot_reference' => 'getTenderOrLotReference',
        'invoiced_object_identifier' => 'getInvoicedObjectIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer_reference'] = isset($data['buyer_reference']) ? $data['buyer_reference'] : null;
        $this->container['project_reference'] = isset($data['project_reference']) ? $data['project_reference'] : null;
        $this->container['contract_reference'] = isset($data['contract_reference']) ? $data['contract_reference'] : null;
        $this->container['purchase_order_reference'] = isset($data['purchase_order_reference']) ? $data['purchase_order_reference'] : null;
        $this->container['sales_order_reference'] = isset($data['sales_order_reference']) ? $data['sales_order_reference'] : null;
        $this->container['receiving_advice_reference'] = isset($data['receiving_advice_reference']) ? $data['receiving_advice_reference'] : null;
        $this->container['dispatch_advice_reference'] = isset($data['dispatch_advice_reference']) ? $data['dispatch_advice_reference'] : null;
        $this->container['tender_or_lot_reference'] = isset($data['tender_or_lot_reference']) ? $data['tender_or_lot_reference'] : null;
        $this->container['invoiced_object_identifier'] = isset($data['invoiced_object_identifier']) ? $data['invoiced_object_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer_reference
     *
     * @return string
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param string $buyer_reference buyer_reference
     *
     * @return $this
     */
    public function setBuyerReference($buyer_reference)
    {
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets project_reference
     *
     * @return string
     */
    public function getProjectReference()
    {
        return $this->container['project_reference'];
    }

    /**
     * Sets project_reference
     *
     * @param string $project_reference project_reference
     *
     * @return $this
     */
    public function setProjectReference($project_reference)
    {
        $this->container['project_reference'] = $project_reference;

        return $this;
    }

    /**
     * Gets contract_reference
     *
     * @return string
     */
    public function getContractReference()
    {
        return $this->container['contract_reference'];
    }

    /**
     * Sets contract_reference
     *
     * @param string $contract_reference contract_reference
     *
     * @return $this
     */
    public function setContractReference($contract_reference)
    {
        $this->container['contract_reference'] = $contract_reference;

        return $this;
    }

    /**
     * Gets purchase_order_reference
     *
     * @return string
     */
    public function getPurchaseOrderReference()
    {
        return $this->container['purchase_order_reference'];
    }

    /**
     * Sets purchase_order_reference
     *
     * @param string $purchase_order_reference purchase_order_reference
     *
     * @return $this
     */
    public function setPurchaseOrderReference($purchase_order_reference)
    {
        $this->container['purchase_order_reference'] = $purchase_order_reference;

        return $this;
    }

    /**
     * Gets sales_order_reference
     *
     * @return string
     */
    public function getSalesOrderReference()
    {
        return $this->container['sales_order_reference'];
    }

    /**
     * Sets sales_order_reference
     *
     * @param string $sales_order_reference sales_order_reference
     *
     * @return $this
     */
    public function setSalesOrderReference($sales_order_reference)
    {
        $this->container['sales_order_reference'] = $sales_order_reference;

        return $this;
    }

    /**
     * Gets receiving_advice_reference
     *
     * @return string
     */
    public function getReceivingAdviceReference()
    {
        return $this->container['receiving_advice_reference'];
    }

    /**
     * Sets receiving_advice_reference
     *
     * @param string $receiving_advice_reference receiving_advice_reference
     *
     * @return $this
     */
    public function setReceivingAdviceReference($receiving_advice_reference)
    {
        $this->container['receiving_advice_reference'] = $receiving_advice_reference;

        return $this;
    }

    /**
     * Gets dispatch_advice_reference
     *
     * @return string
     */
    public function getDispatchAdviceReference()
    {
        return $this->container['dispatch_advice_reference'];
    }

    /**
     * Sets dispatch_advice_reference
     *
     * @param string $dispatch_advice_reference dispatch_advice_reference
     *
     * @return $this
     */
    public function setDispatchAdviceReference($dispatch_advice_reference)
    {
        $this->container['dispatch_advice_reference'] = $dispatch_advice_reference;

        return $this;
    }

    /**
     * Gets tender_or_lot_reference
     *
     * @return string
     */
    public function getTenderOrLotReference()
    {
        return $this->container['tender_or_lot_reference'];
    }

    /**
     * Sets tender_or_lot_reference
     *
     * @param string $tender_or_lot_reference tender_or_lot_reference
     *
     * @return $this
     */
    public function setTenderOrLotReference($tender_or_lot_reference)
    {
        $this->container['tender_or_lot_reference'] = $tender_or_lot_reference;

        return $this;
    }

    /**
     * Gets invoiced_object_identifier
     *
     * @return string
     */
    public function getInvoicedObjectIdentifier()
    {
        return $this->container['invoiced_object_identifier'];
    }

    /**
     * Sets invoiced_object_identifier
     *
     * @param string $invoiced_object_identifier invoiced_object_identifier
     *
     * @return $this
     */
    public function setInvoicedObjectIdentifier($invoiced_object_identifier)
    {
        $this->container['invoiced_object_identifier'] = $invoiced_object_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


