<?php
/**
 * ValidationCheckResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * ValidationCheckResult Class Doc Comment
 *
 * @category Class
 * @description This class models the results of a single check performed during a validation action
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidationCheckResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidationCheckResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'severity' => '\Dangl\AVACloud\Model\ValidationSeverity',
        'check_type' => '\Dangl\AVACloud\Model\ValidationCheckType',
        'message' => 'string',
        'object_validation_check_details' => '\Dangl\AVACloud\Model\ObjectValidationCheckDetails',
        'xml_schema_validation_check_details' => '\Dangl\AVACloud\Model\XmlSchemaValidationCheckDetails',
        'project_validation_check_details' => '\Dangl\AVACloud\Model\ProjectValidationCheckDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'severity' => null,
        'check_type' => null,
        'message' => null,
        'object_validation_check_details' => null,
        'xml_schema_validation_check_details' => null,
        'project_validation_check_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'severity' => 'severity',
        'check_type' => 'checkType',
        'message' => 'message',
        'object_validation_check_details' => 'objectValidationCheckDetails',
        'xml_schema_validation_check_details' => 'xmlSchemaValidationCheckDetails',
        'project_validation_check_details' => 'projectValidationCheckDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'severity' => 'setSeverity',
        'check_type' => 'setCheckType',
        'message' => 'setMessage',
        'object_validation_check_details' => 'setObjectValidationCheckDetails',
        'xml_schema_validation_check_details' => 'setXmlSchemaValidationCheckDetails',
        'project_validation_check_details' => 'setProjectValidationCheckDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'severity' => 'getSeverity',
        'check_type' => 'getCheckType',
        'message' => 'getMessage',
        'object_validation_check_details' => 'getObjectValidationCheckDetails',
        'xml_schema_validation_check_details' => 'getXmlSchemaValidationCheckDetails',
        'project_validation_check_details' => 'getProjectValidationCheckDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['check_type'] = isset($data['check_type']) ? $data['check_type'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['object_validation_check_details'] = isset($data['object_validation_check_details']) ? $data['object_validation_check_details'] : null;
        $this->container['xml_schema_validation_check_details'] = isset($data['xml_schema_validation_check_details']) ? $data['xml_schema_validation_check_details'] : null;
        $this->container['project_validation_check_details'] = isset($data['project_validation_check_details']) ? $data['project_validation_check_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        if ($this->container['check_type'] === null) {
            $invalidProperties[] = "'check_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets severity
     *
     * @return \Dangl\AVACloud\Model\ValidationSeverity
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param \Dangl\AVACloud\Model\ValidationSeverity $severity The severity for this check. Usually, low severity checks do not impact data exchange with third party applications
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return \Dangl\AVACloud\Model\ValidationCheckType
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param \Dangl\AVACloud\Model\ValidationCheckType $check_type The actual check that is represented by this result. Additional information may be found in other properties of this class, depending on the check.
     *
     * @return $this
     */
    public function setCheckType($check_type)
    {
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message A human readable message describing the result of the check.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets object_validation_check_details
     *
     * @return \Dangl\AVACloud\Model\ObjectValidationCheckDetails
     */
    public function getObjectValidationCheckDetails()
    {
        return $this->container['object_validation_check_details'];
    }

    /**
     * Sets object_validation_check_details
     *
     * @param \Dangl\AVACloud\Model\ObjectValidationCheckDetails $object_validation_check_details For CheckType of types ObjectValidation
     *
     * @return $this
     */
    public function setObjectValidationCheckDetails($object_validation_check_details)
    {
        $this->container['object_validation_check_details'] = $object_validation_check_details;

        return $this;
    }

    /**
     * Gets xml_schema_validation_check_details
     *
     * @return \Dangl\AVACloud\Model\XmlSchemaValidationCheckDetails
     */
    public function getXmlSchemaValidationCheckDetails()
    {
        return $this->container['xml_schema_validation_check_details'];
    }

    /**
     * Sets xml_schema_validation_check_details
     *
     * @param \Dangl\AVACloud\Model\XmlSchemaValidationCheckDetails $xml_schema_validation_check_details For CheckType of types XmlSchemaCheck
     *
     * @return $this
     */
    public function setXmlSchemaValidationCheckDetails($xml_schema_validation_check_details)
    {
        $this->container['xml_schema_validation_check_details'] = $xml_schema_validation_check_details;

        return $this;
    }

    /**
     * Gets project_validation_check_details
     *
     * @return \Dangl\AVACloud\Model\ProjectValidationCheckDetails
     */
    public function getProjectValidationCheckDetails()
    {
        return $this->container['project_validation_check_details'];
    }

    /**
     * Sets project_validation_check_details
     *
     * @param \Dangl\AVACloud\Model\ProjectValidationCheckDetails $project_validation_check_details For CheckType of types ProjectValidation
     *
     * @return $this
     */
    public function setProjectValidationCheckDetails($project_validation_check_details)
    {
        $this->container['project_validation_check_details'] = $project_validation_check_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


