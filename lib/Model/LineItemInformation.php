<?php
/**
 * LineItemInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * LineItemInformation Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LineItemInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LineItemInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'seller_identifier' => 'string',
        'buyer_identifier' => 'string',
        'standard_identifier' => 'string',
        'classification_identifiers' => 'string[]',
        'country_of_origin' => 'string',
        'attributes' => '\Dangl\AVACloud\Model\LineItemAttribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'seller_identifier' => null,
        'buyer_identifier' => null,
        'standard_identifier' => null,
        'classification_identifiers' => null,
        'country_of_origin' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'seller_identifier' => 'sellerIdentifier',
        'buyer_identifier' => 'buyerIdentifier',
        'standard_identifier' => 'standardIdentifier',
        'classification_identifiers' => 'classificationIdentifiers',
        'country_of_origin' => 'countryOfOrigin',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'seller_identifier' => 'setSellerIdentifier',
        'buyer_identifier' => 'setBuyerIdentifier',
        'standard_identifier' => 'setStandardIdentifier',
        'classification_identifiers' => 'setClassificationIdentifiers',
        'country_of_origin' => 'setCountryOfOrigin',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'seller_identifier' => 'getSellerIdentifier',
        'buyer_identifier' => 'getBuyerIdentifier',
        'standard_identifier' => 'getStandardIdentifier',
        'classification_identifiers' => 'getClassificationIdentifiers',
        'country_of_origin' => 'getCountryOfOrigin',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['seller_identifier'] = isset($data['seller_identifier']) ? $data['seller_identifier'] : null;
        $this->container['buyer_identifier'] = isset($data['buyer_identifier']) ? $data['buyer_identifier'] : null;
        $this->container['standard_identifier'] = isset($data['standard_identifier']) ? $data['standard_identifier'] : null;
        $this->container['classification_identifiers'] = isset($data['classification_identifiers']) ? $data['classification_identifiers'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets seller_identifier
     *
     * @return string
     */
    public function getSellerIdentifier()
    {
        return $this->container['seller_identifier'];
    }

    /**
     * Sets seller_identifier
     *
     * @param string $seller_identifier seller_identifier
     *
     * @return $this
     */
    public function setSellerIdentifier($seller_identifier)
    {
        $this->container['seller_identifier'] = $seller_identifier;

        return $this;
    }

    /**
     * Gets buyer_identifier
     *
     * @return string
     */
    public function getBuyerIdentifier()
    {
        return $this->container['buyer_identifier'];
    }

    /**
     * Sets buyer_identifier
     *
     * @param string $buyer_identifier buyer_identifier
     *
     * @return $this
     */
    public function setBuyerIdentifier($buyer_identifier)
    {
        $this->container['buyer_identifier'] = $buyer_identifier;

        return $this;
    }

    /**
     * Gets standard_identifier
     *
     * @return string
     */
    public function getStandardIdentifier()
    {
        return $this->container['standard_identifier'];
    }

    /**
     * Sets standard_identifier
     *
     * @param string $standard_identifier standard_identifier
     *
     * @return $this
     */
    public function setStandardIdentifier($standard_identifier)
    {
        $this->container['standard_identifier'] = $standard_identifier;

        return $this;
    }

    /**
     * Gets classification_identifiers
     *
     * @return string[]
     */
    public function getClassificationIdentifiers()
    {
        return $this->container['classification_identifiers'];
    }

    /**
     * Sets classification_identifiers
     *
     * @param string[] $classification_identifiers classification_identifiers
     *
     * @return $this
     */
    public function setClassificationIdentifiers($classification_identifiers)
    {
        $this->container['classification_identifiers'] = $classification_identifiers;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string $country_of_origin country_of_origin
     *
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Dangl\AVACloud\Model\LineItemAttribute[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Dangl\AVACloud\Model\LineItemAttribute[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


