<?php
/**
 * UserInfoGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * UserInfoGet Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserInfoGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserInfoGet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_is_authenticated' => 'bool',
        'client_is_authenticated' => 'bool',
        'current_user_id' => 'string',
        'current_user_identicon_id' => 'string',
        'current_user_name' => 'string',
        'current_user_email' => 'string',
        'current_client_id' => 'string',
        'user_claims' => '\Dangl\AVACloud\Model\ClaimGet[]',
        'client_claims' => '\Dangl\AVACloud\Model\ClaimGet[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_is_authenticated' => null,
        'client_is_authenticated' => null,
        'current_user_id' => 'guid',
        'current_user_identicon_id' => 'guid',
        'current_user_name' => null,
        'current_user_email' => null,
        'current_client_id' => null,
        'user_claims' => null,
        'client_claims' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_is_authenticated' => 'userIsAuthenticated',
        'client_is_authenticated' => 'clientIsAuthenticated',
        'current_user_id' => 'currentUserId',
        'current_user_identicon_id' => 'currentUserIdenticonId',
        'current_user_name' => 'currentUserName',
        'current_user_email' => 'currentUserEmail',
        'current_client_id' => 'currentClientId',
        'user_claims' => 'userClaims',
        'client_claims' => 'clientClaims'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_is_authenticated' => 'setUserIsAuthenticated',
        'client_is_authenticated' => 'setClientIsAuthenticated',
        'current_user_id' => 'setCurrentUserId',
        'current_user_identicon_id' => 'setCurrentUserIdenticonId',
        'current_user_name' => 'setCurrentUserName',
        'current_user_email' => 'setCurrentUserEmail',
        'current_client_id' => 'setCurrentClientId',
        'user_claims' => 'setUserClaims',
        'client_claims' => 'setClientClaims'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_is_authenticated' => 'getUserIsAuthenticated',
        'client_is_authenticated' => 'getClientIsAuthenticated',
        'current_user_id' => 'getCurrentUserId',
        'current_user_identicon_id' => 'getCurrentUserIdenticonId',
        'current_user_name' => 'getCurrentUserName',
        'current_user_email' => 'getCurrentUserEmail',
        'current_client_id' => 'getCurrentClientId',
        'user_claims' => 'getUserClaims',
        'client_claims' => 'getClientClaims'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_is_authenticated'] = isset($data['user_is_authenticated']) ? $data['user_is_authenticated'] : null;
        $this->container['client_is_authenticated'] = isset($data['client_is_authenticated']) ? $data['client_is_authenticated'] : null;
        $this->container['current_user_id'] = isset($data['current_user_id']) ? $data['current_user_id'] : null;
        $this->container['current_user_identicon_id'] = isset($data['current_user_identicon_id']) ? $data['current_user_identicon_id'] : null;
        $this->container['current_user_name'] = isset($data['current_user_name']) ? $data['current_user_name'] : null;
        $this->container['current_user_email'] = isset($data['current_user_email']) ? $data['current_user_email'] : null;
        $this->container['current_client_id'] = isset($data['current_client_id']) ? $data['current_client_id'] : null;
        $this->container['user_claims'] = isset($data['user_claims']) ? $data['user_claims'] : null;
        $this->container['client_claims'] = isset($data['client_claims']) ? $data['client_claims'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_is_authenticated'] === null) {
            $invalidProperties[] = "'user_is_authenticated' can't be null";
        }
        if ($this->container['client_is_authenticated'] === null) {
            $invalidProperties[] = "'client_is_authenticated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_is_authenticated
     *
     * @return bool
     */
    public function getUserIsAuthenticated()
    {
        return $this->container['user_is_authenticated'];
    }

    /**
     * Sets user_is_authenticated
     *
     * @param bool $user_is_authenticated user_is_authenticated
     *
     * @return $this
     */
    public function setUserIsAuthenticated($user_is_authenticated)
    {
        $this->container['user_is_authenticated'] = $user_is_authenticated;

        return $this;
    }

    /**
     * Gets client_is_authenticated
     *
     * @return bool
     */
    public function getClientIsAuthenticated()
    {
        return $this->container['client_is_authenticated'];
    }

    /**
     * Sets client_is_authenticated
     *
     * @param bool $client_is_authenticated client_is_authenticated
     *
     * @return $this
     */
    public function setClientIsAuthenticated($client_is_authenticated)
    {
        $this->container['client_is_authenticated'] = $client_is_authenticated;

        return $this;
    }

    /**
     * Gets current_user_id
     *
     * @return string
     */
    public function getCurrentUserId()
    {
        return $this->container['current_user_id'];
    }

    /**
     * Sets current_user_id
     *
     * @param string $current_user_id current_user_id
     *
     * @return $this
     */
    public function setCurrentUserId($current_user_id)
    {
        $this->container['current_user_id'] = $current_user_id;

        return $this;
    }

    /**
     * Gets current_user_identicon_id
     *
     * @return string
     */
    public function getCurrentUserIdenticonId()
    {
        return $this->container['current_user_identicon_id'];
    }

    /**
     * Sets current_user_identicon_id
     *
     * @param string $current_user_identicon_id current_user_identicon_id
     *
     * @return $this
     */
    public function setCurrentUserIdenticonId($current_user_identicon_id)
    {
        $this->container['current_user_identicon_id'] = $current_user_identicon_id;

        return $this;
    }

    /**
     * Gets current_user_name
     *
     * @return string
     */
    public function getCurrentUserName()
    {
        return $this->container['current_user_name'];
    }

    /**
     * Sets current_user_name
     *
     * @param string $current_user_name current_user_name
     *
     * @return $this
     */
    public function setCurrentUserName($current_user_name)
    {
        $this->container['current_user_name'] = $current_user_name;

        return $this;
    }

    /**
     * Gets current_user_email
     *
     * @return string
     */
    public function getCurrentUserEmail()
    {
        return $this->container['current_user_email'];
    }

    /**
     * Sets current_user_email
     *
     * @param string $current_user_email current_user_email
     *
     * @return $this
     */
    public function setCurrentUserEmail($current_user_email)
    {
        $this->container['current_user_email'] = $current_user_email;

        return $this;
    }

    /**
     * Gets current_client_id
     *
     * @return string
     */
    public function getCurrentClientId()
    {
        return $this->container['current_client_id'];
    }

    /**
     * Sets current_client_id
     *
     * @param string $current_client_id current_client_id
     *
     * @return $this
     */
    public function setCurrentClientId($current_client_id)
    {
        $this->container['current_client_id'] = $current_client_id;

        return $this;
    }

    /**
     * Gets user_claims
     *
     * @return \Dangl\AVACloud\Model\ClaimGet[]
     */
    public function getUserClaims()
    {
        return $this->container['user_claims'];
    }

    /**
     * Sets user_claims
     *
     * @param \Dangl\AVACloud\Model\ClaimGet[] $user_claims user_claims
     *
     * @return $this
     */
    public function setUserClaims($user_claims)
    {
        $this->container['user_claims'] = $user_claims;

        return $this;
    }

    /**
     * Gets client_claims
     *
     * @return \Dangl\AVACloud\Model\ClaimGet[]
     */
    public function getClientClaims()
    {
        return $this->container['client_claims'];
    }

    /**
     * Sets client_claims
     *
     * @param \Dangl\AVACloud\Model\ClaimGet[] $client_claims client_claims
     *
     * @return $this
     */
    public function setClientClaims($client_claims)
    {
        $this->container['client_claims'] = $client_claims;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


