<?php
/**
 * SubDescriptionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * SubDescriptionDto Class Doc Comment
 *
 * @category Class
 * @description This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubDescriptionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubDescriptionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'quantity' => 'float',
        'quantity_override' => 'float',
        'quantity_components' => '\Dangl\AVACloud\Model\CalculationDto[]',
        'amount_to_be_entered_by_bidder' => 'bool',
        'identifier' => 'string',
        'short_text' => 'string',
        'long_text' => 'string',
        'unit_tag' => 'string',
        'html_long_text' => 'string',
        'addition_type' => '\Dangl\AVACloud\Model\AdditionTypeDto',
        'standardized_description' => '\Dangl\AVACloud\Model\StandardizedDescriptionDto',
        'execution_description_reference' => 'string',
        'project_catalogues' => '\Dangl\AVACloud\Model\CatalogueDto[]',
        'description_id' => 'string',
        'has_bidder_comment_in_html_long_text' => 'bool',
        'element_type' => 'string',
        'element_type_discriminator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'quantity' => 'decimal',
        'quantity_override' => 'decimal',
        'quantity_components' => null,
        'amount_to_be_entered_by_bidder' => null,
        'identifier' => null,
        'short_text' => null,
        'long_text' => null,
        'unit_tag' => null,
        'html_long_text' => null,
        'addition_type' => null,
        'standardized_description' => null,
        'execution_description_reference' => 'guid',
        'project_catalogues' => null,
        'description_id' => null,
        'has_bidder_comment_in_html_long_text' => null,
        'element_type' => null,
        'element_type_discriminator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'quantity' => 'quantity',
        'quantity_override' => 'quantityOverride',
        'quantity_components' => 'quantityComponents',
        'amount_to_be_entered_by_bidder' => 'amountToBeEnteredByBidder',
        'identifier' => 'identifier',
        'short_text' => 'shortText',
        'long_text' => 'longText',
        'unit_tag' => 'unitTag',
        'html_long_text' => 'htmlLongText',
        'addition_type' => 'additionType',
        'standardized_description' => 'standardizedDescription',
        'execution_description_reference' => 'executionDescriptionReference',
        'project_catalogues' => 'projectCatalogues',
        'description_id' => 'descriptionId',
        'has_bidder_comment_in_html_long_text' => 'hasBidderCommentInHtmlLongText',
        'element_type' => 'elementType',
        'element_type_discriminator' => 'elementTypeDiscriminator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'quantity' => 'setQuantity',
        'quantity_override' => 'setQuantityOverride',
        'quantity_components' => 'setQuantityComponents',
        'amount_to_be_entered_by_bidder' => 'setAmountToBeEnteredByBidder',
        'identifier' => 'setIdentifier',
        'short_text' => 'setShortText',
        'long_text' => 'setLongText',
        'unit_tag' => 'setUnitTag',
        'html_long_text' => 'setHtmlLongText',
        'addition_type' => 'setAdditionType',
        'standardized_description' => 'setStandardizedDescription',
        'execution_description_reference' => 'setExecutionDescriptionReference',
        'project_catalogues' => 'setProjectCatalogues',
        'description_id' => 'setDescriptionId',
        'has_bidder_comment_in_html_long_text' => 'setHasBidderCommentInHtmlLongText',
        'element_type' => 'setElementType',
        'element_type_discriminator' => 'setElementTypeDiscriminator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'quantity' => 'getQuantity',
        'quantity_override' => 'getQuantityOverride',
        'quantity_components' => 'getQuantityComponents',
        'amount_to_be_entered_by_bidder' => 'getAmountToBeEnteredByBidder',
        'identifier' => 'getIdentifier',
        'short_text' => 'getShortText',
        'long_text' => 'getLongText',
        'unit_tag' => 'getUnitTag',
        'html_long_text' => 'getHtmlLongText',
        'addition_type' => 'getAdditionType',
        'standardized_description' => 'getStandardizedDescription',
        'execution_description_reference' => 'getExecutionDescriptionReference',
        'project_catalogues' => 'getProjectCatalogues',
        'description_id' => 'getDescriptionId',
        'has_bidder_comment_in_html_long_text' => 'getHasBidderCommentInHtmlLongText',
        'element_type' => 'getElementType',
        'element_type_discriminator' => 'getElementTypeDiscriminator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_override'] = isset($data['quantity_override']) ? $data['quantity_override'] : null;
        $this->container['quantity_components'] = isset($data['quantity_components']) ? $data['quantity_components'] : null;
        $this->container['amount_to_be_entered_by_bidder'] = isset($data['amount_to_be_entered_by_bidder']) ? $data['amount_to_be_entered_by_bidder'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['short_text'] = isset($data['short_text']) ? $data['short_text'] : null;
        $this->container['long_text'] = isset($data['long_text']) ? $data['long_text'] : null;
        $this->container['unit_tag'] = isset($data['unit_tag']) ? $data['unit_tag'] : null;
        $this->container['html_long_text'] = isset($data['html_long_text']) ? $data['html_long_text'] : null;
        $this->container['addition_type'] = isset($data['addition_type']) ? $data['addition_type'] : null;
        $this->container['standardized_description'] = isset($data['standardized_description']) ? $data['standardized_description'] : null;
        $this->container['execution_description_reference'] = isset($data['execution_description_reference']) ? $data['execution_description_reference'] : null;
        $this->container['project_catalogues'] = isset($data['project_catalogues']) ? $data['project_catalogues'] : null;
        $this->container['description_id'] = isset($data['description_id']) ? $data['description_id'] : null;
        $this->container['has_bidder_comment_in_html_long_text'] = isset($data['has_bidder_comment_in_html_long_text']) ? $data['has_bidder_comment_in_html_long_text'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['element_type_discriminator'] = isset($data['element_type_discriminator']) ? $data['element_type_discriminator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['amount_to_be_entered_by_bidder'] === null) {
            $invalidProperties[] = "'amount_to_be_entered_by_bidder' can't be null";
        }
        if ($this->container['addition_type'] === null) {
            $invalidProperties[] = "'addition_type' can't be null";
        }
        if ($this->container['has_bidder_comment_in_html_long_text'] === null) {
            $invalidProperties[] = "'has_bidder_comment_in_html_long_text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Elements GUID identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_override
     *
     * @return float
     */
    public function getQuantityOverride()
    {
        return $this->container['quantity_override'];
    }

    /**
     * Sets quantity_override
     *
     * @param float $quantity_override You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents
     *
     * @return $this
     */
    public function setQuantityOverride($quantity_override)
    {
        $this->container['quantity_override'] = $quantity_override;

        return $this;
    }

    /**
     * Gets quantity_components
     *
     * @return \Dangl\AVACloud\Model\CalculationDto[]
     */
    public function getQuantityComponents()
    {
        return $this->container['quantity_components'];
    }

    /**
     * Sets quantity_components
     *
     * @param \Dangl\AVACloud\Model\CalculationDto[] $quantity_components Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.
     *
     * @return $this
     */
    public function setQuantityComponents($quantity_components)
    {
        $this->container['quantity_components'] = $quantity_components;

        return $this;
    }

    /**
     * Gets amount_to_be_entered_by_bidder
     *
     * @return bool
     */
    public function getAmountToBeEnteredByBidder()
    {
        return $this->container['amount_to_be_entered_by_bidder'];
    }

    /**
     * Sets amount_to_be_entered_by_bidder
     *
     * @param bool $amount_to_be_entered_by_bidder Indicates if the bidder is asked to specify an amount.
     *
     * @return $this
     */
    public function setAmountToBeEnteredByBidder($amount_to_be_entered_by_bidder)
    {
        $this->container['amount_to_be_entered_by_bidder'] = $amount_to_be_entered_by_bidder;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier Identifier for this SubDescription.
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets short_text
     *
     * @return string
     */
    public function getShortText()
    {
        return $this->container['short_text'];
    }

    /**
     * Sets short_text
     *
     * @param string $short_text Short description for this DescriptionBase element.
     *
     * @return $this
     */
    public function setShortText($short_text)
    {
        $this->container['short_text'] = $short_text;

        return $this;
    }

    /**
     * Gets long_text
     *
     * @return string
     */
    public function getLongText()
    {
        return $this->container['long_text'];
    }

    /**
     * Sets long_text
     *
     * @param string $long_text Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
     *
     * @return $this
     */
    public function setLongText($long_text)
    {
        $this->container['long_text'] = $long_text;

        return $this;
    }

    /**
     * Gets unit_tag
     *
     * @return string
     */
    public function getUnitTag()
    {
        return $this->container['unit_tag'];
    }

    /**
     * Sets unit_tag
     *
     * @param string $unit_tag If this is given, then the sub description has a different unit tag than the parent position.
     *
     * @return $this
     */
    public function setUnitTag($unit_tag)
    {
        $this->container['unit_tag'] = $unit_tag;

        return $this;
    }

    /**
     * Gets html_long_text
     *
     * @return string
     */
    public function getHtmlLongText()
    {
        return $this->container['html_long_text'];
    }

    /**
     * Sets html_long_text
     *
     * @param string $html_long_text This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
     *
     * @return $this
     */
    public function setHtmlLongText($html_long_text)
    {
        $this->container['html_long_text'] = $html_long_text;

        return $this;
    }

    /**
     * Gets addition_type
     *
     * @return \Dangl\AVACloud\Model\AdditionTypeDto
     */
    public function getAdditionType()
    {
        return $this->container['addition_type'];
    }

    /**
     * Sets addition_type
     *
     * @param \Dangl\AVACloud\Model\AdditionTypeDto $addition_type Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
     *
     * @return $this
     */
    public function setAdditionType($addition_type)
    {
        $this->container['addition_type'] = $addition_type;

        return $this;
    }

    /**
     * Gets standardized_description
     *
     * @return \Dangl\AVACloud\Model\StandardizedDescriptionDto
     */
    public function getStandardizedDescription()
    {
        return $this->container['standardized_description'];
    }

    /**
     * Sets standardized_description
     *
     * @param \Dangl\AVACloud\Model\StandardizedDescriptionDto $standardized_description This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
     *
     * @return $this
     */
    public function setStandardizedDescription($standardized_description)
    {
        $this->container['standardized_description'] = $standardized_description;

        return $this;
    }

    /**
     * Gets execution_description_reference
     *
     * @return string
     */
    public function getExecutionDescriptionReference()
    {
        return $this->container['execution_description_reference'];
    }

    /**
     * Sets execution_description_reference
     *
     * @param string $execution_description_reference This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.
     *
     * @return $this
     */
    public function setExecutionDescriptionReference($execution_description_reference)
    {
        $this->container['execution_description_reference'] = $execution_description_reference;

        return $this;
    }

    /**
     * Gets project_catalogues
     *
     * @return \Dangl\AVACloud\Model\CatalogueDto[]
     */
    public function getProjectCatalogues()
    {
        return $this->container['project_catalogues'];
    }

    /**
     * Sets project_catalogues
     *
     * @param \Dangl\AVACloud\Model\CatalogueDto[] $project_catalogues These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.
     *
     * @return $this
     */
    public function setProjectCatalogues($project_catalogues)
    {
        $this->container['project_catalogues'] = $project_catalogues;

        return $this;
    }

    /**
     * Gets description_id
     *
     * @return string
     */
    public function getDescriptionId()
    {
        return $this->container['description_id'];
    }

    /**
     * Sets description_id
     *
     * @param string $description_id This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.
     *
     * @return $this
     */
    public function setDescriptionId($description_id)
    {
        $this->container['description_id'] = $description_id;

        return $this;
    }

    /**
     * Gets has_bidder_comment_in_html_long_text
     *
     * @return bool
     */
    public function getHasBidderCommentInHtmlLongText()
    {
        return $this->container['has_bidder_comment_in_html_long_text'];
    }

    /**
     * Sets has_bidder_comment_in_html_long_text
     *
     * @param bool $has_bidder_comment_in_html_long_text has_bidder_comment_in_html_long_text
     *
     * @return $this
     */
    public function setHasBidderCommentInHtmlLongText($has_bidder_comment_in_html_long_text)
    {
        $this->container['has_bidder_comment_in_html_long_text'] = $has_bidder_comment_in_html_long_text;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type element_type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets element_type_discriminator
     *
     * @return string
     */
    public function getElementTypeDiscriminator()
    {
        return $this->container['element_type_discriminator'];
    }

    /**
     * Sets element_type_discriminator
     *
     * @param string $element_type_discriminator element_type_discriminator
     *
     * @return $this
     */
    public function setElementTypeDiscriminator($element_type_discriminator)
    {
        $this->container['element_type_discriminator'] = $element_type_discriminator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


