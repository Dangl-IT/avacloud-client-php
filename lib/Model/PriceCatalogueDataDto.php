<?php
/**
 * PriceCatalogueDataDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * PriceCatalogueDataDto Class Doc Comment
 *
 * @category Class
 * @description Price catalogue data represents assumed or estimated prices from a catalogue source
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceCatalogueDataDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PriceCatalogueDataDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'unit_price_from' => 'float',
        'unit_price_to' => 'float',
        'unit_price_average' => 'float',
        'wage_price_from' => 'float',
        'wage_price_to' => 'float',
        'wage_price_average' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'unit_price_from' => 'decimal',
        'unit_price_to' => 'decimal',
        'unit_price_average' => 'decimal',
        'wage_price_from' => 'decimal',
        'wage_price_to' => 'decimal',
        'wage_price_average' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'unit_price_from' => 'unitPriceFrom',
        'unit_price_to' => 'unitPriceTo',
        'unit_price_average' => 'unitPriceAverage',
        'wage_price_from' => 'wagePriceFrom',
        'wage_price_to' => 'wagePriceTo',
        'wage_price_average' => 'wagePriceAverage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'unit_price_from' => 'setUnitPriceFrom',
        'unit_price_to' => 'setUnitPriceTo',
        'unit_price_average' => 'setUnitPriceAverage',
        'wage_price_from' => 'setWagePriceFrom',
        'wage_price_to' => 'setWagePriceTo',
        'wage_price_average' => 'setWagePriceAverage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'unit_price_from' => 'getUnitPriceFrom',
        'unit_price_to' => 'getUnitPriceTo',
        'unit_price_average' => 'getUnitPriceAverage',
        'wage_price_from' => 'getWagePriceFrom',
        'wage_price_to' => 'getWagePriceTo',
        'wage_price_average' => 'getWagePriceAverage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['unit_price_from'] = isset($data['unit_price_from']) ? $data['unit_price_from'] : null;
        $this->container['unit_price_to'] = isset($data['unit_price_to']) ? $data['unit_price_to'] : null;
        $this->container['unit_price_average'] = isset($data['unit_price_average']) ? $data['unit_price_average'] : null;
        $this->container['wage_price_from'] = isset($data['wage_price_from']) ? $data['wage_price_from'] : null;
        $this->container['wage_price_to'] = isset($data['wage_price_to']) ? $data['wage_price_to'] : null;
        $this->container['wage_price_average'] = isset($data['wage_price_average']) ? $data['wage_price_average'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Elements GUID identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets unit_price_from
     *
     * @return float
     */
    public function getUnitPriceFrom()
    {
        return $this->container['unit_price_from'];
    }

    /**
     * Sets unit_price_from
     *
     * @param float $unit_price_from The lower bound of the unit price
     *
     * @return $this
     */
    public function setUnitPriceFrom($unit_price_from)
    {
        $this->container['unit_price_from'] = $unit_price_from;

        return $this;
    }

    /**
     * Gets unit_price_to
     *
     * @return float
     */
    public function getUnitPriceTo()
    {
        return $this->container['unit_price_to'];
    }

    /**
     * Sets unit_price_to
     *
     * @param float $unit_price_to The upper bound of the unit price
     *
     * @return $this
     */
    public function setUnitPriceTo($unit_price_to)
    {
        $this->container['unit_price_to'] = $unit_price_to;

        return $this;
    }

    /**
     * Gets unit_price_average
     *
     * @return float
     */
    public function getUnitPriceAverage()
    {
        return $this->container['unit_price_average'];
    }

    /**
     * Sets unit_price_average
     *
     * @param float $unit_price_average The average unit price
     *
     * @return $this
     */
    public function setUnitPriceAverage($unit_price_average)
    {
        $this->container['unit_price_average'] = $unit_price_average;

        return $this;
    }

    /**
     * Gets wage_price_from
     *
     * @return float
     */
    public function getWagePriceFrom()
    {
        return $this->container['wage_price_from'];
    }

    /**
     * Sets wage_price_from
     *
     * @param float $wage_price_from The lower bound of the wage price
     *
     * @return $this
     */
    public function setWagePriceFrom($wage_price_from)
    {
        $this->container['wage_price_from'] = $wage_price_from;

        return $this;
    }

    /**
     * Gets wage_price_to
     *
     * @return float
     */
    public function getWagePriceTo()
    {
        return $this->container['wage_price_to'];
    }

    /**
     * Sets wage_price_to
     *
     * @param float $wage_price_to The upper bound of the wage price
     *
     * @return $this
     */
    public function setWagePriceTo($wage_price_to)
    {
        $this->container['wage_price_to'] = $wage_price_to;

        return $this;
    }

    /**
     * Gets wage_price_average
     *
     * @return float
     */
    public function getWagePriceAverage()
    {
        return $this->container['wage_price_average'];
    }

    /**
     * Sets wage_price_average
     *
     * @param float $wage_price_average The average wage price
     *
     * @return $this
     */
    public function setWagePriceAverage($wage_price_average)
    {
        $this->container['wage_price_average'] = $wage_price_average;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


