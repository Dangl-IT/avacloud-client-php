<?php
/**
 * ProjectInformationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * ProjectInformationDto Class Doc Comment
 *
 * @category Class
 * @description General information about a Project.
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectInformationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer' => '\Dangl\AVACloud\Model\PartyInformationDto',
        'description' => 'string',
        'description_short' => 'string',
        'name' => 'string',
        'site' => '\Dangl\AVACloud\Model\PartyInformationDto',
        'item_number_schema' => '\Dangl\AVACloud\Model\ItemNumberSchemaDto',
        'currency_short' => 'string',
        'currency_long' => 'string',
        'labour_time_label' => 'string',
        'price_components' => 'string[]',
        'price_component_types' => 'map[string,\Dangl\AVACloud\Model\PriceComponentTypeDto]',
        'bidder_comment_allowed' => 'bool',
        'side_offers_allowed' => 'bool',
        'award_type' => '\Dangl\AVACloud\Model\AwardTypeDto',
        'special_award_kind' => '\Dangl\AVACloud\Model\SpecialAwardKindDto',
        'requesters' => '\Dangl\AVACloud\Model\PartyInformationDto[]',
        'notification_sites' => '\Dangl\AVACloud\Model\PartyInformationDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer' => null,
        'description' => null,
        'description_short' => null,
        'name' => null,
        'site' => null,
        'item_number_schema' => null,
        'currency_short' => null,
        'currency_long' => null,
        'labour_time_label' => null,
        'price_components' => null,
        'price_component_types' => null,
        'bidder_comment_allowed' => null,
        'side_offers_allowed' => null,
        'award_type' => null,
        'special_award_kind' => null,
        'requesters' => null,
        'notification_sites' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer' => 'buyer',
        'description' => 'description',
        'description_short' => 'descriptionShort',
        'name' => 'name',
        'site' => 'site',
        'item_number_schema' => 'itemNumberSchema',
        'currency_short' => 'currencyShort',
        'currency_long' => 'currencyLong',
        'labour_time_label' => 'labourTimeLabel',
        'price_components' => 'priceComponents',
        'price_component_types' => 'priceComponentTypes',
        'bidder_comment_allowed' => 'bidderCommentAllowed',
        'side_offers_allowed' => 'sideOffersAllowed',
        'award_type' => 'awardType',
        'special_award_kind' => 'specialAwardKind',
        'requesters' => 'requesters',
        'notification_sites' => 'notificationSites'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer' => 'setBuyer',
        'description' => 'setDescription',
        'description_short' => 'setDescriptionShort',
        'name' => 'setName',
        'site' => 'setSite',
        'item_number_schema' => 'setItemNumberSchema',
        'currency_short' => 'setCurrencyShort',
        'currency_long' => 'setCurrencyLong',
        'labour_time_label' => 'setLabourTimeLabel',
        'price_components' => 'setPriceComponents',
        'price_component_types' => 'setPriceComponentTypes',
        'bidder_comment_allowed' => 'setBidderCommentAllowed',
        'side_offers_allowed' => 'setSideOffersAllowed',
        'award_type' => 'setAwardType',
        'special_award_kind' => 'setSpecialAwardKind',
        'requesters' => 'setRequesters',
        'notification_sites' => 'setNotificationSites'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer' => 'getBuyer',
        'description' => 'getDescription',
        'description_short' => 'getDescriptionShort',
        'name' => 'getName',
        'site' => 'getSite',
        'item_number_schema' => 'getItemNumberSchema',
        'currency_short' => 'getCurrencyShort',
        'currency_long' => 'getCurrencyLong',
        'labour_time_label' => 'getLabourTimeLabel',
        'price_components' => 'getPriceComponents',
        'price_component_types' => 'getPriceComponentTypes',
        'bidder_comment_allowed' => 'getBidderCommentAllowed',
        'side_offers_allowed' => 'getSideOffersAllowed',
        'award_type' => 'getAwardType',
        'special_award_kind' => 'getSpecialAwardKind',
        'requesters' => 'getRequesters',
        'notification_sites' => 'getNotificationSites'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_short'] = isset($data['description_short']) ? $data['description_short'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['item_number_schema'] = isset($data['item_number_schema']) ? $data['item_number_schema'] : null;
        $this->container['currency_short'] = isset($data['currency_short']) ? $data['currency_short'] : null;
        $this->container['currency_long'] = isset($data['currency_long']) ? $data['currency_long'] : null;
        $this->container['labour_time_label'] = isset($data['labour_time_label']) ? $data['labour_time_label'] : null;
        $this->container['price_components'] = isset($data['price_components']) ? $data['price_components'] : null;
        $this->container['price_component_types'] = isset($data['price_component_types']) ? $data['price_component_types'] : null;
        $this->container['bidder_comment_allowed'] = isset($data['bidder_comment_allowed']) ? $data['bidder_comment_allowed'] : null;
        $this->container['side_offers_allowed'] = isset($data['side_offers_allowed']) ? $data['side_offers_allowed'] : null;
        $this->container['award_type'] = isset($data['award_type']) ? $data['award_type'] : null;
        $this->container['special_award_kind'] = isset($data['special_award_kind']) ? $data['special_award_kind'] : null;
        $this->container['requesters'] = isset($data['requesters']) ? $data['requesters'] : null;
        $this->container['notification_sites'] = isset($data['notification_sites']) ? $data['notification_sites'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bidder_comment_allowed'] === null) {
            $invalidProperties[] = "'bidder_comment_allowed' can't be null";
        }
        if ($this->container['side_offers_allowed'] === null) {
            $invalidProperties[] = "'side_offers_allowed' can't be null";
        }
        if ($this->container['award_type'] === null) {
            $invalidProperties[] = "'award_type' can't be null";
        }
        if ($this->container['special_award_kind'] === null) {
            $invalidProperties[] = "'special_award_kind' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer
     *
     * @return \Dangl\AVACloud\Model\PartyInformationDto
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Dangl\AVACloud\Model\PartyInformationDto $buyer Information about the buyer.
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description for the project.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_short
     *
     * @return string
     */
    public function getDescriptionShort()
    {
        return $this->container['description_short'];
    }

    /**
     * Sets description_short
     *
     * @param string $description_short Short description for the project.
     *
     * @return $this
     */
    public function setDescriptionShort($description_short)
    {
        $this->container['description_short'] = $description_short;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the project.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Dangl\AVACloud\Model\PartyInformationDto
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Dangl\AVACloud\Model\PartyInformationDto $site Information about the site.
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets item_number_schema
     *
     * @return \Dangl\AVACloud\Model\ItemNumberSchemaDto
     */
    public function getItemNumberSchema()
    {
        return $this->container['item_number_schema'];
    }

    /**
     * Sets item_number_schema
     *
     * @param \Dangl\AVACloud\Model\ItemNumberSchemaDto $item_number_schema The ItemNumberSchema used in the project.
     *
     * @return $this
     */
    public function setItemNumberSchema($item_number_schema)
    {
        $this->container['item_number_schema'] = $item_number_schema;

        return $this;
    }

    /**
     * Gets currency_short
     *
     * @return string
     */
    public function getCurrencyShort()
    {
        return $this->container['currency_short'];
    }

    /**
     * Sets currency_short
     *
     * @param string $currency_short Short label for the currency used.
     *
     * @return $this
     */
    public function setCurrencyShort($currency_short)
    {
        $this->container['currency_short'] = $currency_short;

        return $this;
    }

    /**
     * Gets currency_long
     *
     * @return string
     */
    public function getCurrencyLong()
    {
        return $this->container['currency_long'];
    }

    /**
     * Sets currency_long
     *
     * @param string $currency_long Full label of the currency used.
     *
     * @return $this
     */
    public function setCurrencyLong($currency_long)
    {
        $this->container['currency_long'] = $currency_long;

        return $this;
    }

    /**
     * Gets labour_time_label
     *
     * @return string
     */
    public function getLabourTimeLabel()
    {
        return $this->container['labour_time_label'];
    }

    /**
     * Sets labour_time_label
     *
     * @param string $labour_time_label Label for the labour time part of prices used in the project.
     *
     * @return $this
     */
    public function setLabourTimeLabel($labour_time_label)
    {
        $this->container['labour_time_label'] = $labour_time_label;

        return $this;
    }

    /**
     * Gets price_components
     *
     * @return string[]
     */
    public function getPriceComponents()
    {
        return $this->container['price_components'];
    }

    /**
     * Sets price_components
     *
     * @param string[] $price_components Labels for the price components used in the project. Caution: Removal of a price component will trigger to have dependent price informations be deleted in IElements that use this property. If this property is changed or altered after the project has already been used, it is strongly advised to do operations step by step, e.g. if renaming and reordering multiple price components, this should be done one by one. Otherwise, a combination of rename and reordering will not be correctly propagated downwards to child objects in this Project.
     *
     * @return $this
     */
    public function setPriceComponents($price_components)
    {
        $this->container['price_components'] = $price_components;

        return $this;
    }

    /**
     * Gets price_component_types
     *
     * @return map[string,\Dangl\AVACloud\Model\PriceComponentTypeDto]
     */
    public function getPriceComponentTypes()
    {
        return $this->container['price_component_types'];
    }

    /**
     * Sets price_component_types
     *
     * @param map[string,\Dangl\AVACloud\Model\PriceComponentTypeDto] $price_component_types This dictionary specifies actual types used for the PriceComponents. For example, a single price component might have the name 'Material' as a string, ans this dictionary would then have a key 'Material' and a value of Materials. You can not add keys here that are not also present in the PriceComponents property, and removing price components will also remove them from this dictionary here.
     *
     * @return $this
     */
    public function setPriceComponentTypes($price_component_types)
    {
        $this->container['price_component_types'] = $price_component_types;

        return $this;
    }

    /**
     * Gets bidder_comment_allowed
     *
     * @return bool
     */
    public function getBidderCommentAllowed()
    {
        return $this->container['bidder_comment_allowed'];
    }

    /**
     * Sets bidder_comment_allowed
     *
     * @param bool $bidder_comment_allowed This bool indicates if this project allows the bidder to add bidder comments. Bidder comments are a way to attach clarifying information when submitting an offer.
     *
     * @return $this
     */
    public function setBidderCommentAllowed($bidder_comment_allowed)
    {
        $this->container['bidder_comment_allowed'] = $bidder_comment_allowed;

        return $this;
    }

    /**
     * Gets side_offers_allowed
     *
     * @return bool
     */
    public function getSideOffersAllowed()
    {
        return $this->container['side_offers_allowed'];
    }

    /**
     * Sets side_offers_allowed
     *
     * @param bool $side_offers_allowed This property indicates if the project should allow side offers from contractors. In GAEB, a side offer would typically be in exchange phase 85.
     *
     * @return $this
     */
    public function setSideOffersAllowed($side_offers_allowed)
    {
        $this->container['side_offers_allowed'] = $side_offers_allowed;

        return $this;
    }

    /**
     * Gets award_type
     *
     * @return \Dangl\AVACloud\Model\AwardTypeDto
     */
    public function getAwardType()
    {
        return $this->container['award_type'];
    }

    /**
     * Sets award_type
     *
     * @param \Dangl\AVACloud\Model\AwardTypeDto $award_type This enumeration describes the type of the award / procurement process. If this is used in a GAEB context, more information about award types can be found in the German VOB/A rules and the GAEB standard
     *
     * @return $this
     */
    public function setAwardType($award_type)
    {
        $this->container['award_type'] = $award_type;

        return $this;
    }

    /**
     * Gets special_award_kind
     *
     * @return \Dangl\AVACloud\Model\SpecialAwardKindDto
     */
    public function getSpecialAwardKind()
    {
        return $this->container['special_award_kind'];
    }

    /**
     * Sets special_award_kind
     *
     * @param \Dangl\AVACloud\Model\SpecialAwardKindDto $special_award_kind This enumeration describes awards for project that are not just a regular procurement. For example, it can be used to describe recurring maintenance or an outline contract (German: Rahmenvertrag) which just specifies services and prices but may be requested on demand when necessary
     *
     * @return $this
     */
    public function setSpecialAwardKind($special_award_kind)
    {
        $this->container['special_award_kind'] = $special_award_kind;

        return $this;
    }

    /**
     * Gets requesters
     *
     * @return \Dangl\AVACloud\Model\PartyInformationDto[]
     */
    public function getRequesters()
    {
        return $this->container['requesters'];
    }

    /**
     * Sets requesters
     *
     * @param \Dangl\AVACloud\Model\PartyInformationDto[] $requesters Requesters in a construction project, in German also called 'Bedarfsträger', are parties connected to the building process, e.g. architects or planners.
     *
     * @return $this
     */
    public function setRequesters($requesters)
    {
        $this->container['requesters'] = $requesters;

        return $this;
    }

    /**
     * Gets notification_sites
     *
     * @return \Dangl\AVACloud\Model\PartyInformationDto[]
     */
    public function getNotificationSites()
    {
        return $this->container['notification_sites'];
    }

    /**
     * Sets notification_sites
     *
     * @param \Dangl\AVACloud\Model\PartyInformationDto[] $notification_sites Notification sites are addresses that are used for delivering messages in the context of construction projects.
     *
     * @return $this
     */
    public function setNotificationSites($notification_sites)
    {
        $this->container['notification_sites'] = $notification_sites;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


