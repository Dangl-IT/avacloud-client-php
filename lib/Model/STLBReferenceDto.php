<?php
/**
 * STLBReferenceDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * STLBReferenceDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a specialized reference to the German STLB \&quot;Standardleistungsbuch Bau\&quot;. The STLB is a commercial offering and describes common services in the construction sector. When this is used, this describes the exact type of a service via a reference to this standard
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class STLBReferenceDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'STLBReferenceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version_date' => '\DateTime',
        'catalogue_name' => 'string',
        'group' => 'string',
        'cost_group' => 'string',
        'service_area' => 'string',
        'keys' => '\Dangl\AVACloud\Model\STLBKeyDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version_date' => 'date-time',
        'catalogue_name' => null,
        'group' => null,
        'cost_group' => null,
        'service_area' => null,
        'keys' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version_date' => 'versionDate',
        'catalogue_name' => 'catalogueName',
        'group' => 'group',
        'cost_group' => 'costGroup',
        'service_area' => 'serviceArea',
        'keys' => 'keys'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version_date' => 'setVersionDate',
        'catalogue_name' => 'setCatalogueName',
        'group' => 'setGroup',
        'cost_group' => 'setCostGroup',
        'service_area' => 'setServiceArea',
        'keys' => 'setKeys'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version_date' => 'getVersionDate',
        'catalogue_name' => 'getCatalogueName',
        'group' => 'getGroup',
        'cost_group' => 'getCostGroup',
        'service_area' => 'getServiceArea',
        'keys' => 'getKeys'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version_date'] = isset($data['version_date']) ? $data['version_date'] : null;
        $this->container['catalogue_name'] = isset($data['catalogue_name']) ? $data['catalogue_name'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['cost_group'] = isset($data['cost_group']) ? $data['cost_group'] : null;
        $this->container['service_area'] = isset($data['service_area']) ? $data['service_area'] : null;
        $this->container['keys'] = isset($data['keys']) ? $data['keys'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version_date
     *
     * @return \DateTime
     */
    public function getVersionDate()
    {
        return $this->container['version_date'];
    }

    /**
     * Sets version_date
     *
     * @param \DateTime $version_date The date of the STLB version. Typically, only the Year and Month are used
     *
     * @return $this
     */
    public function setVersionDate($version_date)
    {
        $this->container['version_date'] = $version_date;

        return $this;
    }

    /**
     * Gets catalogue_name
     *
     * @return string
     */
    public function getCatalogueName()
    {
        return $this->container['catalogue_name'];
    }

    /**
     * Sets catalogue_name
     *
     * @param string $catalogue_name The name of the catalogue within the STLB
     *
     * @return $this
     */
    public function setCatalogueName($catalogue_name)
    {
        $this->container['catalogue_name'] = $catalogue_name;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group The name of the group in STLB
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets cost_group
     *
     * @return string
     */
    public function getCostGroup()
    {
        return $this->container['cost_group'];
    }

    /**
     * Sets cost_group
     *
     * @param string $cost_group The cost group this service is associated with
     *
     * @return $this
     */
    public function setCostGroup($cost_group)
    {
        $this->container['cost_group'] = $cost_group;

        return $this;
    }

    /**
     * Gets service_area
     *
     * @return string
     */
    public function getServiceArea()
    {
        return $this->container['service_area'];
    }

    /**
     * Sets service_area
     *
     * @param string $service_area The service area (or type) in the STLB
     *
     * @return $this
     */
    public function setServiceArea($service_area)
    {
        $this->container['service_area'] = $service_area;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return \Dangl\AVACloud\Model\STLBKeyDto[]
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param \Dangl\AVACloud\Model\STLBKeyDto[] $keys These keys may optionally be used to further reference multiple, specific items within the STLB
     *
     * @return $this
     */
    public function setKeys($keys)
    {
        $this->container['keys'] = $keys;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


