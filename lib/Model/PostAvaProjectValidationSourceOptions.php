<?php
/**
 * PostAvaProjectValidationSourceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.30.6
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.30.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * PostAvaProjectValidationSourceOptions Class Doc Comment
 *
 * @category Class
 * @description Options for validating an AVA project
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostAvaProjectValidationSourceOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostAvaProjectValidationSourceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ava_project' => '\Dangl\AVACloud\Model\ProjectDto',
        'service_specification_index' => 'int',
        'validation_type' => '\Dangl\AVACloud\Model\ValidationType',
        'exchange_phase' => '\Dangl\AVACloud\Model\ExchangePhaseDto',
        'ava_source_options' => '\Dangl\AVACloud\Model\PostAvaSourceOptions',
        'oenorm_destination_options' => '\Dangl\AVACloud\Model\PostOenormDestinationOptions',
        'gaeb_destination_options' => '\Dangl\AVACloud\Model\PostGaebDestinationOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ava_project' => null,
        'service_specification_index' => 'int32',
        'validation_type' => null,
        'exchange_phase' => null,
        'ava_source_options' => null,
        'oenorm_destination_options' => null,
        'gaeb_destination_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ava_project' => 'avaProject',
        'service_specification_index' => 'serviceSpecificationIndex',
        'validation_type' => 'validationType',
        'exchange_phase' => 'exchangePhase',
        'ava_source_options' => 'avaSourceOptions',
        'oenorm_destination_options' => 'oenormDestinationOptions',
        'gaeb_destination_options' => 'gaebDestinationOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ava_project' => 'setAvaProject',
        'service_specification_index' => 'setServiceSpecificationIndex',
        'validation_type' => 'setValidationType',
        'exchange_phase' => 'setExchangePhase',
        'ava_source_options' => 'setAvaSourceOptions',
        'oenorm_destination_options' => 'setOenormDestinationOptions',
        'gaeb_destination_options' => 'setGaebDestinationOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ava_project' => 'getAvaProject',
        'service_specification_index' => 'getServiceSpecificationIndex',
        'validation_type' => 'getValidationType',
        'exchange_phase' => 'getExchangePhase',
        'ava_source_options' => 'getAvaSourceOptions',
        'oenorm_destination_options' => 'getOenormDestinationOptions',
        'gaeb_destination_options' => 'getGaebDestinationOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ava_project'] = isset($data['ava_project']) ? $data['ava_project'] : null;
        $this->container['service_specification_index'] = isset($data['service_specification_index']) ? $data['service_specification_index'] : null;
        $this->container['validation_type'] = isset($data['validation_type']) ? $data['validation_type'] : null;
        $this->container['exchange_phase'] = isset($data['exchange_phase']) ? $data['exchange_phase'] : null;
        $this->container['ava_source_options'] = isset($data['ava_source_options']) ? $data['ava_source_options'] : null;
        $this->container['oenorm_destination_options'] = isset($data['oenorm_destination_options']) ? $data['oenorm_destination_options'] : null;
        $this->container['gaeb_destination_options'] = isset($data['gaeb_destination_options']) ? $data['gaeb_destination_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ava_project'] === null) {
            $invalidProperties[] = "'ava_project' can't be null";
        }
        if ($this->container['validation_type'] === null) {
            $invalidProperties[] = "'validation_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ava_project
     *
     * @return \Dangl\AVACloud\Model\ProjectDto
     */
    public function getAvaProject()
    {
        return $this->container['ava_project'];
    }

    /**
     * Sets ava_project
     *
     * @param \Dangl\AVACloud\Model\ProjectDto $ava_project The project that should be validated
     *
     * @return $this
     */
    public function setAvaProject($ava_project)
    {
        $this->container['ava_project'] = $ava_project;

        return $this;
    }

    /**
     * Gets service_specification_index
     *
     * @return int
     */
    public function getServiceSpecificationIndex()
    {
        return $this->container['service_specification_index'];
    }

    /**
     * Sets service_specification_index
     *
     * @param int $service_specification_index The index of the ServiceSpecification that should be validated. If not given, will default to the first one in the project.
     *
     * @return $this
     */
    public function setServiceSpecificationIndex($service_specification_index)
    {
        $this->container['service_specification_index'] = $service_specification_index;

        return $this;
    }

    /**
     * Gets validation_type
     *
     * @return \Dangl\AVACloud\Model\ValidationType
     */
    public function getValidationType()
    {
        return $this->container['validation_type'];
    }

    /**
     * Sets validation_type
     *
     * @param \Dangl\AVACloud\Model\ValidationType $validation_type This can optionally be specified to simulate a conversion to a specific target.
     *
     * @return $this
     */
    public function setValidationType($validation_type)
    {
        $this->container['validation_type'] = $validation_type;

        return $this;
    }

    /**
     * Gets exchange_phase
     *
     * @return \Dangl\AVACloud\Model\ExchangePhaseDto
     */
    public function getExchangePhase()
    {
        return $this->container['exchange_phase'];
    }

    /**
     * Sets exchange_phase
     *
     * @param \Dangl\AVACloud\Model\ExchangePhaseDto $exchange_phase This can optionally be supplied to test for a specific exchange phase. For example, missing prices will only trigger errors in some specific exchange phases. Please note: If a conversion to a specific format, e.g. GAEB or Ã–Norm, is given, this parameter is not applied to the internal conversion. The converter options must be set in the appropriate properties as well.
     *
     * @return $this
     */
    public function setExchangePhase($exchange_phase)
    {
        $this->container['exchange_phase'] = $exchange_phase;

        return $this;
    }

    /**
     * Gets ava_source_options
     *
     * @return \Dangl\AVACloud\Model\PostAvaSourceOptions
     */
    public function getAvaSourceOptions()
    {
        return $this->container['ava_source_options'];
    }

    /**
     * Sets ava_source_options
     *
     * @param \Dangl\AVACloud\Model\PostAvaSourceOptions $ava_source_options Options for importing the AVA project
     *
     * @return $this
     */
    public function setAvaSourceOptions($ava_source_options)
    {
        $this->container['ava_source_options'] = $ava_source_options;

        return $this;
    }

    /**
     * Gets oenorm_destination_options
     *
     * @return \Dangl\AVACloud\Model\PostOenormDestinationOptions
     */
    public function getOenormDestinationOptions()
    {
        return $this->container['oenorm_destination_options'];
    }

    /**
     * Sets oenorm_destination_options
     *
     * @param \Dangl\AVACloud\Model\PostOenormDestinationOptions $oenorm_destination_options Options for conversion to Oenorm. Should be given if ValidationType is set to Oenorm.
     *
     * @return $this
     */
    public function setOenormDestinationOptions($oenorm_destination_options)
    {
        $this->container['oenorm_destination_options'] = $oenorm_destination_options;

        return $this;
    }

    /**
     * Gets gaeb_destination_options
     *
     * @return \Dangl\AVACloud\Model\PostGaebDestinationOptions
     */
    public function getGaebDestinationOptions()
    {
        return $this->container['gaeb_destination_options'];
    }

    /**
     * Sets gaeb_destination_options
     *
     * @param \Dangl\AVACloud\Model\PostGaebDestinationOptions $gaeb_destination_options Options for conversion to GAEB. Should be given if ValidationType is set to GAEB.
     *
     * @return $this
     */
    public function setGaebDestinationOptions($gaeb_destination_options)
    {
        $this->container['gaeb_destination_options'] = $gaeb_destination_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


