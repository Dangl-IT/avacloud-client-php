<?php
/**
 * AvaProjectWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * AvaProjectWrapper Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvaProjectWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AvaProjectWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project' => '\Dangl\AVACloud\Model\ProjectDto',
        'invoice_number' => 'string',
        'documents' => '\Dangl\AVACloud\Model\SupportingDocument[]',
        'invoice_period' => '\Dangl\AVACloud\Model\InvoicePeriod',
        'payment_instructions' => '\Dangl\AVACloud\Model\PaymentInstructions',
        'invoice_type' => '\Dangl\AVACloud\Model\InvoiceType',
        'payment_due_date' => '\DateTime',
        'payment_terms' => 'string',
        'previous_invoices' => '\Dangl\AVACloud\Model\PreviousInvoice[]',
        'already_paid_total_gross' => 'float',
        'references' => '\Dangl\AVACloud\Model\References'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project' => null,
        'invoice_number' => null,
        'documents' => null,
        'invoice_period' => null,
        'payment_instructions' => null,
        'invoice_type' => null,
        'payment_due_date' => 'date-time',
        'payment_terms' => null,
        'previous_invoices' => null,
        'already_paid_total_gross' => 'decimal',
        'references' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project' => 'project',
        'invoice_number' => 'invoiceNumber',
        'documents' => 'documents',
        'invoice_period' => 'invoicePeriod',
        'payment_instructions' => 'paymentInstructions',
        'invoice_type' => 'invoiceType',
        'payment_due_date' => 'paymentDueDate',
        'payment_terms' => 'paymentTerms',
        'previous_invoices' => 'previousInvoices',
        'already_paid_total_gross' => 'alreadyPaidTotalGross',
        'references' => 'references'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project' => 'setProject',
        'invoice_number' => 'setInvoiceNumber',
        'documents' => 'setDocuments',
        'invoice_period' => 'setInvoicePeriod',
        'payment_instructions' => 'setPaymentInstructions',
        'invoice_type' => 'setInvoiceType',
        'payment_due_date' => 'setPaymentDueDate',
        'payment_terms' => 'setPaymentTerms',
        'previous_invoices' => 'setPreviousInvoices',
        'already_paid_total_gross' => 'setAlreadyPaidTotalGross',
        'references' => 'setReferences'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project' => 'getProject',
        'invoice_number' => 'getInvoiceNumber',
        'documents' => 'getDocuments',
        'invoice_period' => 'getInvoicePeriod',
        'payment_instructions' => 'getPaymentInstructions',
        'invoice_type' => 'getInvoiceType',
        'payment_due_date' => 'getPaymentDueDate',
        'payment_terms' => 'getPaymentTerms',
        'previous_invoices' => 'getPreviousInvoices',
        'already_paid_total_gross' => 'getAlreadyPaidTotalGross',
        'references' => 'getReferences'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['invoice_period'] = isset($data['invoice_period']) ? $data['invoice_period'] : null;
        $this->container['payment_instructions'] = isset($data['payment_instructions']) ? $data['payment_instructions'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['previous_invoices'] = isset($data['previous_invoices']) ? $data['previous_invoices'] : null;
        $this->container['already_paid_total_gross'] = isset($data['already_paid_total_gross']) ? $data['already_paid_total_gross'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project'] === null) {
            $invalidProperties[] = "'project' can't be null";
        }
        if ($this->container['invoice_type'] === null) {
            $invalidProperties[] = "'invoice_type' can't be null";
        }
        if ($this->container['already_paid_total_gross'] === null) {
            $invalidProperties[] = "'already_paid_total_gross' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project
     *
     * @return \Dangl\AVACloud\Model\ProjectDto
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Dangl\AVACloud\Model\ProjectDto $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Dangl\AVACloud\Model\SupportingDocument[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Dangl\AVACloud\Model\SupportingDocument[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets invoice_period
     *
     * @return \Dangl\AVACloud\Model\InvoicePeriod
     */
    public function getInvoicePeriod()
    {
        return $this->container['invoice_period'];
    }

    /**
     * Sets invoice_period
     *
     * @param \Dangl\AVACloud\Model\InvoicePeriod $invoice_period invoice_period
     *
     * @return $this
     */
    public function setInvoicePeriod($invoice_period)
    {
        $this->container['invoice_period'] = $invoice_period;

        return $this;
    }

    /**
     * Gets payment_instructions
     *
     * @return \Dangl\AVACloud\Model\PaymentInstructions
     */
    public function getPaymentInstructions()
    {
        return $this->container['payment_instructions'];
    }

    /**
     * Sets payment_instructions
     *
     * @param \Dangl\AVACloud\Model\PaymentInstructions $payment_instructions payment_instructions
     *
     * @return $this
     */
    public function setPaymentInstructions($payment_instructions)
    {
        $this->container['payment_instructions'] = $payment_instructions;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \Dangl\AVACloud\Model\InvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \Dangl\AVACloud\Model\InvoiceType $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date payment_due_date
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string $payment_terms payment_terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets previous_invoices
     *
     * @return \Dangl\AVACloud\Model\PreviousInvoice[]
     */
    public function getPreviousInvoices()
    {
        return $this->container['previous_invoices'];
    }

    /**
     * Sets previous_invoices
     *
     * @param \Dangl\AVACloud\Model\PreviousInvoice[] $previous_invoices previous_invoices
     *
     * @return $this
     */
    public function setPreviousInvoices($previous_invoices)
    {
        $this->container['previous_invoices'] = $previous_invoices;

        return $this;
    }

    /**
     * Gets already_paid_total_gross
     *
     * @return float
     */
    public function getAlreadyPaidTotalGross()
    {
        return $this->container['already_paid_total_gross'];
    }

    /**
     * Sets already_paid_total_gross
     *
     * @param float $already_paid_total_gross already_paid_total_gross
     *
     * @return $this
     */
    public function setAlreadyPaidTotalGross($already_paid_total_gross)
    {
        $this->container['already_paid_total_gross'] = $already_paid_total_gross;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Dangl\AVACloud\Model\References
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \Dangl\AVACloud\Model\References $references references
     *
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


