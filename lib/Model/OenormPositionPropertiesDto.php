<?php
/**
 * OenormPositionPropertiesDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.41.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * OenormPositionPropertiesDto Class Doc Comment
 *
 * @category Class
 * @description This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OenormPositionPropertiesDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OenormPositionPropertiesDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'origin_code' => '\Dangl\AVACloud\Model\OenormOriginCodeDto',
        'opening_text_is_free_text' => 'bool',
        'is_main_position' => 'bool',
        'is_undivided_position' => 'bool',
        'oenorm_short_text' => 'string',
        'oenorm_short_text_addition' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'origin_code' => null,
        'opening_text_is_free_text' => null,
        'is_main_position' => null,
        'is_undivided_position' => null,
        'oenorm_short_text' => null,
        'oenorm_short_text_addition' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin_code' => 'originCode',
        'opening_text_is_free_text' => 'openingTextIsFreeText',
        'is_main_position' => 'isMainPosition',
        'is_undivided_position' => 'isUndividedPosition',
        'oenorm_short_text' => 'oenormShortText',
        'oenorm_short_text_addition' => 'oenormShortTextAddition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin_code' => 'setOriginCode',
        'opening_text_is_free_text' => 'setOpeningTextIsFreeText',
        'is_main_position' => 'setIsMainPosition',
        'is_undivided_position' => 'setIsUndividedPosition',
        'oenorm_short_text' => 'setOenormShortText',
        'oenorm_short_text_addition' => 'setOenormShortTextAddition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin_code' => 'getOriginCode',
        'opening_text_is_free_text' => 'getOpeningTextIsFreeText',
        'is_main_position' => 'getIsMainPosition',
        'is_undivided_position' => 'getIsUndividedPosition',
        'oenorm_short_text' => 'getOenormShortText',
        'oenorm_short_text_addition' => 'getOenormShortTextAddition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origin_code'] = isset($data['origin_code']) ? $data['origin_code'] : null;
        $this->container['opening_text_is_free_text'] = isset($data['opening_text_is_free_text']) ? $data['opening_text_is_free_text'] : null;
        $this->container['is_main_position'] = isset($data['is_main_position']) ? $data['is_main_position'] : null;
        $this->container['is_undivided_position'] = isset($data['is_undivided_position']) ? $data['is_undivided_position'] : null;
        $this->container['oenorm_short_text'] = isset($data['oenorm_short_text']) ? $data['oenorm_short_text'] : null;
        $this->container['oenorm_short_text_addition'] = isset($data['oenorm_short_text_addition']) ? $data['oenorm_short_text_addition'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['origin_code'] === null) {
            $invalidProperties[] = "'origin_code' can't be null";
        }
        if ($this->container['opening_text_is_free_text'] === null) {
            $invalidProperties[] = "'opening_text_is_free_text' can't be null";
        }
        if ($this->container['is_main_position'] === null) {
            $invalidProperties[] = "'is_main_position' can't be null";
        }
        if ($this->container['is_undivided_position'] === null) {
            $invalidProperties[] = "'is_undivided_position' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin_code
     *
     * @return \Dangl\AVACloud\Model\OenormOriginCodeDto
     */
    public function getOriginCode()
    {
        return $this->container['origin_code'];
    }

    /**
     * Sets origin_code
     *
     * @param \Dangl\AVACloud\Model\OenormOriginCodeDto $origin_code This indicates where the content of this element originates, if set. It corresponds to 'herkunftskennzeichen' in ÖNorm
     *
     * @return $this
     */
    public function setOriginCode($origin_code)
    {
        $this->container['origin_code'] = $origin_code;

        return $this;
    }

    /**
     * Gets opening_text_is_free_text
     *
     * @return bool
     */
    public function getOpeningTextIsFreeText()
    {
        return $this->container['opening_text_is_free_text'];
    }

    /**
     * Sets opening_text_is_free_text
     *
     * @param bool $opening_text_is_free_text This marks if the opening texts within this element are considered free text. It corresponds to 'vorbemerkungskennzeichen' in ÖNorm.
     *
     * @return $this
     */
    public function setOpeningTextIsFreeText($opening_text_is_free_text)
    {
        $this->container['opening_text_is_free_text'] = $opening_text_is_free_text;

        return $this;
    }

    /**
     * Gets is_main_position
     *
     * @return bool
     */
    public function getIsMainPosition()
    {
        return $this->container['is_main_position'];
    }

    /**
     * Sets is_main_position
     *
     * @param bool $is_main_position This indicates if the ÖNorm 'wesentliche position' mark is set
     *
     * @return $this
     */
    public function setIsMainPosition($is_main_position)
    {
        $this->container['is_main_position'] = $is_main_position;

        return $this;
    }

    /**
     * Gets is_undivided_position
     *
     * @return bool
     */
    public function getIsUndividedPosition()
    {
        return $this->container['is_undivided_position'];
    }

    /**
     * Sets is_undivided_position
     *
     * @param bool $is_undivided_position This indicates if the ÖNorm position was a 'ungeteilteposition' (undivided position). This will only be taken into account when the position is also the sole element inside it's parent group
     *
     * @return $this
     */
    public function setIsUndividedPosition($is_undivided_position)
    {
        $this->container['is_undivided_position'] = $is_undivided_position;

        return $this;
    }

    /**
     * Gets oenorm_short_text
     *
     * @return string
     */
    public function getOenormShortText()
    {
        return $this->container['oenorm_short_text'];
    }

    /**
     * Sets oenorm_short_text
     *
     * @param string $oenorm_short_text In some ÖNorm formats, the short text can have it's own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText ' ' OenormShortTextAddition needs to match the ShortText.
     *
     * @return $this
     */
    public function setOenormShortText($oenorm_short_text)
    {
        $this->container['oenorm_short_text'] = $oenorm_short_text;

        return $this;
    }

    /**
     * Gets oenorm_short_text_addition
     *
     * @return string
     */
    public function getOenormShortTextAddition()
    {
        return $this->container['oenorm_short_text_addition'];
    }

    /**
     * Sets oenorm_short_text_addition
     *
     * @param string $oenorm_short_text_addition In some ÖNorm formats, the short text can have it's own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText ' ' OenormShortTextAddition needs to match the ShortText.
     *
     * @return $this
     */
    public function setOenormShortTextAddition($oenorm_short_text_addition)
    {
        $this->container['oenorm_short_text_addition'] = $oenorm_short_text_addition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


