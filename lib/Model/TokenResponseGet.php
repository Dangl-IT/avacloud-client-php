<?php
/**
 * TokenResponseGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * TokenResponseGet Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenResponseGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TokenResponseGet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_token' => 'string',
        'error' => 'string',
        'error_description' => 'string',
        'expires_in' => 'int',
        'http_error_reason' => 'string',
        'http_status_code' => '\Dangl\AVACloud\Model\HttpStatusCode',
        'identity_token' => 'string',
        'is_error' => 'bool',
        'refresh_token' => 'string',
        'token_type' => 'string',
        'error_type' => '\Dangl\AVACloud\Model\ResponseErrorType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_token' => null,
        'error' => null,
        'error_description' => null,
        'expires_in' => 'int64',
        'http_error_reason' => null,
        'http_status_code' => null,
        'identity_token' => null,
        'is_error' => null,
        'refresh_token' => null,
        'token_type' => null,
        'error_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token' => 'accessToken',
        'error' => 'error',
        'error_description' => 'errorDescription',
        'expires_in' => 'expiresIn',
        'http_error_reason' => 'httpErrorReason',
        'http_status_code' => 'httpStatusCode',
        'identity_token' => 'identityToken',
        'is_error' => 'isError',
        'refresh_token' => 'refreshToken',
        'token_type' => 'tokenType',
        'error_type' => 'errorType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_token' => 'setAccessToken',
        'error' => 'setError',
        'error_description' => 'setErrorDescription',
        'expires_in' => 'setExpiresIn',
        'http_error_reason' => 'setHttpErrorReason',
        'http_status_code' => 'setHttpStatusCode',
        'identity_token' => 'setIdentityToken',
        'is_error' => 'setIsError',
        'refresh_token' => 'setRefreshToken',
        'token_type' => 'setTokenType',
        'error_type' => 'setErrorType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_token' => 'getAccessToken',
        'error' => 'getError',
        'error_description' => 'getErrorDescription',
        'expires_in' => 'getExpiresIn',
        'http_error_reason' => 'getHttpErrorReason',
        'http_status_code' => 'getHttpStatusCode',
        'identity_token' => 'getIdentityToken',
        'is_error' => 'getIsError',
        'refresh_token' => 'getRefreshToken',
        'token_type' => 'getTokenType',
        'error_type' => 'getErrorType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['error_description'] = isset($data['error_description']) ? $data['error_description'] : null;
        $this->container['expires_in'] = isset($data['expires_in']) ? $data['expires_in'] : null;
        $this->container['http_error_reason'] = isset($data['http_error_reason']) ? $data['http_error_reason'] : null;
        $this->container['http_status_code'] = isset($data['http_status_code']) ? $data['http_status_code'] : null;
        $this->container['identity_token'] = isset($data['identity_token']) ? $data['identity_token'] : null;
        $this->container['is_error'] = isset($data['is_error']) ? $data['is_error'] : null;
        $this->container['refresh_token'] = isset($data['refresh_token']) ? $data['refresh_token'] : null;
        $this->container['token_type'] = isset($data['token_type']) ? $data['token_type'] : null;
        $this->container['error_type'] = isset($data['error_type']) ? $data['error_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['expires_in'] === null) {
            $invalidProperties[] = "'expires_in' can't be null";
        }
        if ($this->container['http_status_code'] === null) {
            $invalidProperties[] = "'http_status_code' can't be null";
        }
        if ($this->container['is_error'] === null) {
            $invalidProperties[] = "'is_error' can't be null";
        }
        if ($this->container['error_type'] === null) {
            $invalidProperties[] = "'error_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets error_description
     *
     * @return string
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * Sets error_description
     *
     * @param string $error_description error_description
     *
     * @return $this
     */
    public function setErrorDescription($error_description)
    {
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param int $expires_in expires_in
     *
     * @return $this
     */
    public function setExpiresIn($expires_in)
    {
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets http_error_reason
     *
     * @return string
     */
    public function getHttpErrorReason()
    {
        return $this->container['http_error_reason'];
    }

    /**
     * Sets http_error_reason
     *
     * @param string $http_error_reason http_error_reason
     *
     * @return $this
     */
    public function setHttpErrorReason($http_error_reason)
    {
        $this->container['http_error_reason'] = $http_error_reason;

        return $this;
    }

    /**
     * Gets http_status_code
     *
     * @return \Dangl\AVACloud\Model\HttpStatusCode
     */
    public function getHttpStatusCode()
    {
        return $this->container['http_status_code'];
    }

    /**
     * Sets http_status_code
     *
     * @param \Dangl\AVACloud\Model\HttpStatusCode $http_status_code http_status_code
     *
     * @return $this
     */
    public function setHttpStatusCode($http_status_code)
    {
        $this->container['http_status_code'] = $http_status_code;

        return $this;
    }

    /**
     * Gets identity_token
     *
     * @return string
     */
    public function getIdentityToken()
    {
        return $this->container['identity_token'];
    }

    /**
     * Sets identity_token
     *
     * @param string $identity_token identity_token
     *
     * @return $this
     */
    public function setIdentityToken($identity_token)
    {
        $this->container['identity_token'] = $identity_token;

        return $this;
    }

    /**
     * Gets is_error
     *
     * @return bool
     */
    public function getIsError()
    {
        return $this->container['is_error'];
    }

    /**
     * Sets is_error
     *
     * @param bool $is_error is_error
     *
     * @return $this
     */
    public function setIsError($is_error)
    {
        $this->container['is_error'] = $is_error;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->container['refresh_token'];
    }

    /**
     * Sets refresh_token
     *
     * @param string $refresh_token refresh_token
     *
     * @return $this
     */
    public function setRefreshToken($refresh_token)
    {
        $this->container['refresh_token'] = $refresh_token;

        return $this;
    }

    /**
     * Gets token_type
     *
     * @return string
     */
    public function getTokenType()
    {
        return $this->container['token_type'];
    }

    /**
     * Sets token_type
     *
     * @param string $token_type token_type
     *
     * @return $this
     */
    public function setTokenType($token_type)
    {
        $this->container['token_type'] = $token_type;

        return $this;
    }

    /**
     * Gets error_type
     *
     * @return \Dangl\AVACloud\Model\ResponseErrorType
     */
    public function getErrorType()
    {
        return $this->container['error_type'];
    }

    /**
     * Sets error_type
     *
     * @param \Dangl\AVACloud\Model\ResponseErrorType $error_type error_type
     *
     * @return $this
     */
    public function setErrorType($error_type)
    {
        $this->container['error_type'] = $error_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


