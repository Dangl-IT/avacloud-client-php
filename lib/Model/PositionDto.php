<?php
/**
 * PositionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * PositionDto Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PositionDto extends IElementDto 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PositionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_price' => 'float',
        'unit_price_override' => 'float',
        'quantity' => 'float',
        'quantity_override' => 'float',
        'is_complementing_position' => 'bool',
        'complements_positions' => 'string[]',
        'complementing_price_percentage_override' => 'float',
        'complementing_price_percentage' => 'float',
        'unit_tag' => 'string',
        'labour_components' => '\Dangl\AVACloud\Model\LabourPriceComponentDto',
        'price_components' => '\Dangl\AVACloud\Model\PriceComponentDto[]',
        'quantity_components' => '\Dangl\AVACloud\Model\CalculationDto[]',
        'sub_descriptions' => '\Dangl\AVACloud\Model\SubDescriptionDto[]',
        'comission_status' => '\Dangl\AVACloud\Model\ComissionStatusDto',
        'complemented_by' => 'string[]',
        'complemented' => 'bool',
        'amount_to_be_entered_by_bidder' => 'bool',
        'price_composition_required' => 'bool',
        'use_different_tax_rate' => 'bool',
        'tax_rate' => 'float',
        'item_number' => '\Dangl\AVACloud\Model\ItemNumberDto',
        'deduction_factor' => 'float',
        'total_price' => 'float',
        'total_price_gross' => 'float',
        'total_price_gross_deducted' => 'float',
        'deducted_price' => 'float',
        'position_type' => '\Dangl\AVACloud\Model\PositionTypeDto',
        'price_type' => '\Dangl\AVACloud\Model\PriceTypeDto',
        'service_type' => '\Dangl\AVACloud\Model\ServiceTypeDto',
        'product_data' => '\Dangl\AVACloud\Model\ProductDataDto',
        'short_text' => 'string',
        'long_text' => 'string',
        'html_long_text' => 'string',
        'addition_type' => '\Dangl\AVACloud\Model\AdditionTypeDto',
        'element_type' => 'string',
        'quantity_assignments' => '\Dangl\AVACloud\Model\QuantityAssignmentDto[]',
        'commerce_properties' => '\Dangl\AVACloud\Model\CommercePropertiesDto',
        'alternative_to' => 'string',
        'alternative_identifier' => 'int',
        'alternative_group_identifier' => 'int',
        'is_lump_sum' => 'bool',
        'repetition_to' => 'string',
        'standardized_description' => '\Dangl\AVACloud\Model\StandardizedDescriptionDto',
        'complemented_by_quantities' => '\Dangl\AVACloud\Model\ComplementedByQuantityDto[]',
        'execution_description_reference' => 'string',
        'not_offered' => 'bool',
        'oenorm_position_properties' => '\Dangl\AVACloud\Model\OenormPositionPropertiesDto',
        'description_id' => 'string',
        'hierarchy_level' => 'int',
        'addendum_status' => '\Dangl\AVACloud\Model\AddendumStatusDto',
        'has_bidder_comment_in_html_long_text' => 'bool',
        'gaeb_complementing_type' => '\Dangl\AVACloud\Model\PositionComplementingTypeDto',
        'hold_out_properties' => '\Dangl\AVACloud\Model\PositionHoldOutPropertiesDto',
        'estimated_quantity' => 'float',
        'price_catalogue_data' => '\Dangl\AVACloud\Model\PriceCatalogueDataDto',
        'ignore_project_catalogue_propagation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_price' => 'decimal',
        'unit_price_override' => 'decimal',
        'quantity' => 'decimal',
        'quantity_override' => 'decimal',
        'is_complementing_position' => null,
        'complements_positions' => 'guid',
        'complementing_price_percentage_override' => 'decimal',
        'complementing_price_percentage' => 'decimal',
        'unit_tag' => null,
        'labour_components' => null,
        'price_components' => null,
        'quantity_components' => null,
        'sub_descriptions' => null,
        'comission_status' => null,
        'complemented_by' => 'guid',
        'complemented' => null,
        'amount_to_be_entered_by_bidder' => null,
        'price_composition_required' => null,
        'use_different_tax_rate' => null,
        'tax_rate' => 'decimal',
        'item_number' => null,
        'deduction_factor' => 'decimal',
        'total_price' => 'decimal',
        'total_price_gross' => 'decimal',
        'total_price_gross_deducted' => 'decimal',
        'deducted_price' => 'decimal',
        'position_type' => null,
        'price_type' => null,
        'service_type' => null,
        'product_data' => null,
        'short_text' => null,
        'long_text' => null,
        'html_long_text' => null,
        'addition_type' => null,
        'element_type' => null,
        'quantity_assignments' => null,
        'commerce_properties' => null,
        'alternative_to' => 'guid',
        'alternative_identifier' => 'int32',
        'alternative_group_identifier' => 'int32',
        'is_lump_sum' => null,
        'repetition_to' => 'guid',
        'standardized_description' => null,
        'complemented_by_quantities' => null,
        'execution_description_reference' => 'guid',
        'not_offered' => null,
        'oenorm_position_properties' => null,
        'description_id' => null,
        'hierarchy_level' => 'int32',
        'addendum_status' => null,
        'has_bidder_comment_in_html_long_text' => null,
        'gaeb_complementing_type' => null,
        'hold_out_properties' => null,
        'estimated_quantity' => 'decimal',
        'price_catalogue_data' => null,
        'ignore_project_catalogue_propagation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_price' => 'unitPrice',
        'unit_price_override' => 'unitPriceOverride',
        'quantity' => 'quantity',
        'quantity_override' => 'quantityOverride',
        'is_complementing_position' => 'isComplementingPosition',
        'complements_positions' => 'complementsPositions',
        'complementing_price_percentage_override' => 'complementingPricePercentageOverride',
        'complementing_price_percentage' => 'complementingPricePercentage',
        'unit_tag' => 'unitTag',
        'labour_components' => 'labourComponents',
        'price_components' => 'priceComponents',
        'quantity_components' => 'quantityComponents',
        'sub_descriptions' => 'subDescriptions',
        'comission_status' => 'comissionStatus',
        'complemented_by' => 'complementedBy',
        'complemented' => 'complemented',
        'amount_to_be_entered_by_bidder' => 'amountToBeEnteredByBidder',
        'price_composition_required' => 'priceCompositionRequired',
        'use_different_tax_rate' => 'useDifferentTaxRate',
        'tax_rate' => 'taxRate',
        'item_number' => 'itemNumber',
        'deduction_factor' => 'deductionFactor',
        'total_price' => 'totalPrice',
        'total_price_gross' => 'totalPriceGross',
        'total_price_gross_deducted' => 'totalPriceGrossDeducted',
        'deducted_price' => 'deductedPrice',
        'position_type' => 'positionType',
        'price_type' => 'priceType',
        'service_type' => 'serviceType',
        'product_data' => 'productData',
        'short_text' => 'shortText',
        'long_text' => 'longText',
        'html_long_text' => 'htmlLongText',
        'addition_type' => 'additionType',
        'element_type' => 'elementType',
        'quantity_assignments' => 'quantityAssignments',
        'commerce_properties' => 'commerceProperties',
        'alternative_to' => 'alternativeTo',
        'alternative_identifier' => 'alternativeIdentifier',
        'alternative_group_identifier' => 'alternativeGroupIdentifier',
        'is_lump_sum' => 'isLumpSum',
        'repetition_to' => 'repetitionTo',
        'standardized_description' => 'standardizedDescription',
        'complemented_by_quantities' => 'complementedByQuantities',
        'execution_description_reference' => 'executionDescriptionReference',
        'not_offered' => 'notOffered',
        'oenorm_position_properties' => 'oenormPositionProperties',
        'description_id' => 'descriptionId',
        'hierarchy_level' => 'hierarchyLevel',
        'addendum_status' => 'addendumStatus',
        'has_bidder_comment_in_html_long_text' => 'hasBidderCommentInHtmlLongText',
        'gaeb_complementing_type' => 'gaebComplementingType',
        'hold_out_properties' => 'holdOutProperties',
        'estimated_quantity' => 'estimatedQuantity',
        'price_catalogue_data' => 'priceCatalogueData',
        'ignore_project_catalogue_propagation' => 'ignoreProjectCataloguePropagation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_price' => 'setUnitPrice',
        'unit_price_override' => 'setUnitPriceOverride',
        'quantity' => 'setQuantity',
        'quantity_override' => 'setQuantityOverride',
        'is_complementing_position' => 'setIsComplementingPosition',
        'complements_positions' => 'setComplementsPositions',
        'complementing_price_percentage_override' => 'setComplementingPricePercentageOverride',
        'complementing_price_percentage' => 'setComplementingPricePercentage',
        'unit_tag' => 'setUnitTag',
        'labour_components' => 'setLabourComponents',
        'price_components' => 'setPriceComponents',
        'quantity_components' => 'setQuantityComponents',
        'sub_descriptions' => 'setSubDescriptions',
        'comission_status' => 'setComissionStatus',
        'complemented_by' => 'setComplementedBy',
        'complemented' => 'setComplemented',
        'amount_to_be_entered_by_bidder' => 'setAmountToBeEnteredByBidder',
        'price_composition_required' => 'setPriceCompositionRequired',
        'use_different_tax_rate' => 'setUseDifferentTaxRate',
        'tax_rate' => 'setTaxRate',
        'item_number' => 'setItemNumber',
        'deduction_factor' => 'setDeductionFactor',
        'total_price' => 'setTotalPrice',
        'total_price_gross' => 'setTotalPriceGross',
        'total_price_gross_deducted' => 'setTotalPriceGrossDeducted',
        'deducted_price' => 'setDeductedPrice',
        'position_type' => 'setPositionType',
        'price_type' => 'setPriceType',
        'service_type' => 'setServiceType',
        'product_data' => 'setProductData',
        'short_text' => 'setShortText',
        'long_text' => 'setLongText',
        'html_long_text' => 'setHtmlLongText',
        'addition_type' => 'setAdditionType',
        'element_type' => 'setElementType',
        'quantity_assignments' => 'setQuantityAssignments',
        'commerce_properties' => 'setCommerceProperties',
        'alternative_to' => 'setAlternativeTo',
        'alternative_identifier' => 'setAlternativeIdentifier',
        'alternative_group_identifier' => 'setAlternativeGroupIdentifier',
        'is_lump_sum' => 'setIsLumpSum',
        'repetition_to' => 'setRepetitionTo',
        'standardized_description' => 'setStandardizedDescription',
        'complemented_by_quantities' => 'setComplementedByQuantities',
        'execution_description_reference' => 'setExecutionDescriptionReference',
        'not_offered' => 'setNotOffered',
        'oenorm_position_properties' => 'setOenormPositionProperties',
        'description_id' => 'setDescriptionId',
        'hierarchy_level' => 'setHierarchyLevel',
        'addendum_status' => 'setAddendumStatus',
        'has_bidder_comment_in_html_long_text' => 'setHasBidderCommentInHtmlLongText',
        'gaeb_complementing_type' => 'setGaebComplementingType',
        'hold_out_properties' => 'setHoldOutProperties',
        'estimated_quantity' => 'setEstimatedQuantity',
        'price_catalogue_data' => 'setPriceCatalogueData',
        'ignore_project_catalogue_propagation' => 'setIgnoreProjectCataloguePropagation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_price' => 'getUnitPrice',
        'unit_price_override' => 'getUnitPriceOverride',
        'quantity' => 'getQuantity',
        'quantity_override' => 'getQuantityOverride',
        'is_complementing_position' => 'getIsComplementingPosition',
        'complements_positions' => 'getComplementsPositions',
        'complementing_price_percentage_override' => 'getComplementingPricePercentageOverride',
        'complementing_price_percentage' => 'getComplementingPricePercentage',
        'unit_tag' => 'getUnitTag',
        'labour_components' => 'getLabourComponents',
        'price_components' => 'getPriceComponents',
        'quantity_components' => 'getQuantityComponents',
        'sub_descriptions' => 'getSubDescriptions',
        'comission_status' => 'getComissionStatus',
        'complemented_by' => 'getComplementedBy',
        'complemented' => 'getComplemented',
        'amount_to_be_entered_by_bidder' => 'getAmountToBeEnteredByBidder',
        'price_composition_required' => 'getPriceCompositionRequired',
        'use_different_tax_rate' => 'getUseDifferentTaxRate',
        'tax_rate' => 'getTaxRate',
        'item_number' => 'getItemNumber',
        'deduction_factor' => 'getDeductionFactor',
        'total_price' => 'getTotalPrice',
        'total_price_gross' => 'getTotalPriceGross',
        'total_price_gross_deducted' => 'getTotalPriceGrossDeducted',
        'deducted_price' => 'getDeductedPrice',
        'position_type' => 'getPositionType',
        'price_type' => 'getPriceType',
        'service_type' => 'getServiceType',
        'product_data' => 'getProductData',
        'short_text' => 'getShortText',
        'long_text' => 'getLongText',
        'html_long_text' => 'getHtmlLongText',
        'addition_type' => 'getAdditionType',
        'element_type' => 'getElementType',
        'quantity_assignments' => 'getQuantityAssignments',
        'commerce_properties' => 'getCommerceProperties',
        'alternative_to' => 'getAlternativeTo',
        'alternative_identifier' => 'getAlternativeIdentifier',
        'alternative_group_identifier' => 'getAlternativeGroupIdentifier',
        'is_lump_sum' => 'getIsLumpSum',
        'repetition_to' => 'getRepetitionTo',
        'standardized_description' => 'getStandardizedDescription',
        'complemented_by_quantities' => 'getComplementedByQuantities',
        'execution_description_reference' => 'getExecutionDescriptionReference',
        'not_offered' => 'getNotOffered',
        'oenorm_position_properties' => 'getOenormPositionProperties',
        'description_id' => 'getDescriptionId',
        'hierarchy_level' => 'getHierarchyLevel',
        'addendum_status' => 'getAddendumStatus',
        'has_bidder_comment_in_html_long_text' => 'getHasBidderCommentInHtmlLongText',
        'gaeb_complementing_type' => 'getGaebComplementingType',
        'hold_out_properties' => 'getHoldOutProperties',
        'estimated_quantity' => 'getEstimatedQuantity',
        'price_catalogue_data' => 'getPriceCatalogueData',
        'ignore_project_catalogue_propagation' => 'getIgnoreProjectCataloguePropagation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_price_override'] = isset($data['unit_price_override']) ? $data['unit_price_override'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_override'] = isset($data['quantity_override']) ? $data['quantity_override'] : null;
        $this->container['is_complementing_position'] = isset($data['is_complementing_position']) ? $data['is_complementing_position'] : null;
        $this->container['complements_positions'] = isset($data['complements_positions']) ? $data['complements_positions'] : null;
        $this->container['complementing_price_percentage_override'] = isset($data['complementing_price_percentage_override']) ? $data['complementing_price_percentage_override'] : null;
        $this->container['complementing_price_percentage'] = isset($data['complementing_price_percentage']) ? $data['complementing_price_percentage'] : null;
        $this->container['unit_tag'] = isset($data['unit_tag']) ? $data['unit_tag'] : null;
        $this->container['labour_components'] = isset($data['labour_components']) ? $data['labour_components'] : null;
        $this->container['price_components'] = isset($data['price_components']) ? $data['price_components'] : null;
        $this->container['quantity_components'] = isset($data['quantity_components']) ? $data['quantity_components'] : null;
        $this->container['sub_descriptions'] = isset($data['sub_descriptions']) ? $data['sub_descriptions'] : null;
        $this->container['comission_status'] = isset($data['comission_status']) ? $data['comission_status'] : null;
        $this->container['complemented_by'] = isset($data['complemented_by']) ? $data['complemented_by'] : null;
        $this->container['complemented'] = isset($data['complemented']) ? $data['complemented'] : null;
        $this->container['amount_to_be_entered_by_bidder'] = isset($data['amount_to_be_entered_by_bidder']) ? $data['amount_to_be_entered_by_bidder'] : null;
        $this->container['price_composition_required'] = isset($data['price_composition_required']) ? $data['price_composition_required'] : null;
        $this->container['use_different_tax_rate'] = isset($data['use_different_tax_rate']) ? $data['use_different_tax_rate'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['deduction_factor'] = isset($data['deduction_factor']) ? $data['deduction_factor'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['total_price_gross_deducted'] = isset($data['total_price_gross_deducted']) ? $data['total_price_gross_deducted'] : null;
        $this->container['deducted_price'] = isset($data['deducted_price']) ? $data['deducted_price'] : null;
        $this->container['position_type'] = isset($data['position_type']) ? $data['position_type'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['product_data'] = isset($data['product_data']) ? $data['product_data'] : null;
        $this->container['short_text'] = isset($data['short_text']) ? $data['short_text'] : null;
        $this->container['long_text'] = isset($data['long_text']) ? $data['long_text'] : null;
        $this->container['html_long_text'] = isset($data['html_long_text']) ? $data['html_long_text'] : null;
        $this->container['addition_type'] = isset($data['addition_type']) ? $data['addition_type'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['quantity_assignments'] = isset($data['quantity_assignments']) ? $data['quantity_assignments'] : null;
        $this->container['commerce_properties'] = isset($data['commerce_properties']) ? $data['commerce_properties'] : null;
        $this->container['alternative_to'] = isset($data['alternative_to']) ? $data['alternative_to'] : null;
        $this->container['alternative_identifier'] = isset($data['alternative_identifier']) ? $data['alternative_identifier'] : null;
        $this->container['alternative_group_identifier'] = isset($data['alternative_group_identifier']) ? $data['alternative_group_identifier'] : null;
        $this->container['is_lump_sum'] = isset($data['is_lump_sum']) ? $data['is_lump_sum'] : null;
        $this->container['repetition_to'] = isset($data['repetition_to']) ? $data['repetition_to'] : null;
        $this->container['standardized_description'] = isset($data['standardized_description']) ? $data['standardized_description'] : null;
        $this->container['complemented_by_quantities'] = isset($data['complemented_by_quantities']) ? $data['complemented_by_quantities'] : null;
        $this->container['execution_description_reference'] = isset($data['execution_description_reference']) ? $data['execution_description_reference'] : null;
        $this->container['not_offered'] = isset($data['not_offered']) ? $data['not_offered'] : null;
        $this->container['oenorm_position_properties'] = isset($data['oenorm_position_properties']) ? $data['oenorm_position_properties'] : null;
        $this->container['description_id'] = isset($data['description_id']) ? $data['description_id'] : null;
        $this->container['hierarchy_level'] = isset($data['hierarchy_level']) ? $data['hierarchy_level'] : null;
        $this->container['addendum_status'] = isset($data['addendum_status']) ? $data['addendum_status'] : null;
        $this->container['has_bidder_comment_in_html_long_text'] = isset($data['has_bidder_comment_in_html_long_text']) ? $data['has_bidder_comment_in_html_long_text'] : null;
        $this->container['gaeb_complementing_type'] = isset($data['gaeb_complementing_type']) ? $data['gaeb_complementing_type'] : null;
        $this->container['hold_out_properties'] = isset($data['hold_out_properties']) ? $data['hold_out_properties'] : null;
        $this->container['estimated_quantity'] = isset($data['estimated_quantity']) ? $data['estimated_quantity'] : null;
        $this->container['price_catalogue_data'] = isset($data['price_catalogue_data']) ? $data['price_catalogue_data'] : null;
        $this->container['ignore_project_catalogue_propagation'] = isset($data['ignore_project_catalogue_propagation']) ? $data['ignore_project_catalogue_propagation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['is_complementing_position'] === null) {
            $invalidProperties[] = "'is_complementing_position' can't be null";
        }
        if ($this->container['comission_status'] === null) {
            $invalidProperties[] = "'comission_status' can't be null";
        }
        if ($this->container['complemented'] === null) {
            $invalidProperties[] = "'complemented' can't be null";
        }
        if ($this->container['amount_to_be_entered_by_bidder'] === null) {
            $invalidProperties[] = "'amount_to_be_entered_by_bidder' can't be null";
        }
        if ($this->container['price_composition_required'] === null) {
            $invalidProperties[] = "'price_composition_required' can't be null";
        }
        if ($this->container['use_different_tax_rate'] === null) {
            $invalidProperties[] = "'use_different_tax_rate' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['deduction_factor'] === null) {
            $invalidProperties[] = "'deduction_factor' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['total_price_gross'] === null) {
            $invalidProperties[] = "'total_price_gross' can't be null";
        }
        if ($this->container['total_price_gross_deducted'] === null) {
            $invalidProperties[] = "'total_price_gross_deducted' can't be null";
        }
        if ($this->container['deducted_price'] === null) {
            $invalidProperties[] = "'deducted_price' can't be null";
        }
        if ($this->container['position_type'] === null) {
            $invalidProperties[] = "'position_type' can't be null";
        }
        if ($this->container['price_type'] === null) {
            $invalidProperties[] = "'price_type' can't be null";
        }
        if ($this->container['service_type'] === null) {
            $invalidProperties[] = "'service_type' can't be null";
        }
        if ($this->container['addition_type'] === null) {
            $invalidProperties[] = "'addition_type' can't be null";
        }
        if ($this->container['is_lump_sum'] === null) {
            $invalidProperties[] = "'is_lump_sum' can't be null";
        }
        if ($this->container['not_offered'] === null) {
            $invalidProperties[] = "'not_offered' can't be null";
        }
        if ($this->container['hierarchy_level'] === null) {
            $invalidProperties[] = "'hierarchy_level' can't be null";
        }
        if ($this->container['has_bidder_comment_in_html_long_text'] === null) {
            $invalidProperties[] = "'has_bidder_comment_in_html_long_text' can't be null";
        }
        if ($this->container['gaeb_complementing_type'] === null) {
            $invalidProperties[] = "'gaeb_complementing_type' can't be null";
        }
        if ($this->container['ignore_project_catalogue_propagation'] === null) {
            $invalidProperties[] = "'ignore_project_catalogue_propagation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price Will return the price per unit, rounded according to the project settings or the default value of three decimal places
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_override
     *
     * @return float
     */
    public function getUnitPriceOverride()
    {
        return $this->container['unit_price_override'];
    }

    /**
     * Sets unit_price_override
     *
     * @param float $unit_price_override You can use this property to directly set the unit price for this position. This will override any given PriceComponents
     *
     * @return $this
     */
    public function setUnitPriceOverride($unit_price_override)
    {
        $this->container['unit_price_override'] = $unit_price_override;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Will return this Position's total quantity, rounded to three decimal places.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_override
     *
     * @return float
     */
    public function getQuantityOverride()
    {
        return $this->container['quantity_override'];
    }

    /**
     * Sets quantity_override
     *
     * @param float $quantity_override You can use this property to directly set the quantity for this position. This will override any given QuantityComponents
     *
     * @return $this
     */
    public function setQuantityOverride($quantity_override)
    {
        $this->container['quantity_override'] = $quantity_override;

        return $this;
    }

    /**
     * Gets is_complementing_position
     *
     * @return bool
     */
    public function getIsComplementingPosition()
    {
        return $this->container['is_complementing_position'];
    }

    /**
     * Sets is_complementing_position
     *
     * @param bool $is_complementing_position This indicates true if this specific position is specified as a complementing position for any base position.
     *
     * @return $this
     */
    public function setIsComplementingPosition($is_complementing_position)
    {
        $this->container['is_complementing_position'] = $is_complementing_position;

        return $this;
    }

    /**
     * Gets complements_positions
     *
     * @return string[]
     */
    public function getComplementsPositions()
    {
        return $this->container['complements_positions'];
    }

    /**
     * Sets complements_positions
     *
     * @param string[] $complements_positions If IsComplementingPosition is set to true, this will indicate which base positions are targeted by this complementing position.
     *
     * @return $this
     */
    public function setComplementsPositions($complements_positions)
    {
        $this->container['complements_positions'] = $complements_positions;

        return $this;
    }

    /**
     * Gets complementing_price_percentage_override
     *
     * @return float
     */
    public function getComplementingPricePercentageOverride()
    {
        return $this->container['complementing_price_percentage_override'];
    }

    /**
     * Sets complementing_price_percentage_override
     *
     * @param float $complementing_price_percentage_override You can use this property to directly specify the total price of this position as a percentage of the sum of the total prices of base positions that this position complements. It will essentially set the total price for this position to the sum of all total prices of the positions specified in ComplementsPositions multiplied by the percentage here. If present, this has precedence over UnitPriceOverride as well as QuantityOverride.
     *
     * @return $this
     */
    public function setComplementingPricePercentageOverride($complementing_price_percentage_override)
    {
        $this->container['complementing_price_percentage_override'] = $complementing_price_percentage_override;

        return $this;
    }

    /**
     * Gets complementing_price_percentage
     *
     * @return float
     */
    public function getComplementingPricePercentage()
    {
        return $this->container['complementing_price_percentage'];
    }

    /**
     * Sets complementing_price_percentage
     *
     * @param float $complementing_price_percentage This is a read only property showing the total price of this positions as a percentage of the sum of the total prices of all base positions, in case this position is a complementing positions. If this position is not a complementing position, this will be null. Also, if no prices are present, this will also be null.
     *
     * @return $this
     */
    public function setComplementingPricePercentage($complementing_price_percentage)
    {
        $this->container['complementing_price_percentage'] = $complementing_price_percentage;

        return $this;
    }

    /**
     * Gets unit_tag
     *
     * @return string
     */
    public function getUnitTag()
    {
        return $this->container['unit_tag'];
    }

    /**
     * Sets unit_tag
     *
     * @param string $unit_tag The tag of the unit used for this positions quantity.
     *
     * @return $this
     */
    public function setUnitTag($unit_tag)
    {
        $this->container['unit_tag'] = $unit_tag;

        return $this;
    }

    /**
     * Gets labour_components
     *
     * @return \Dangl\AVACloud\Model\LabourPriceComponentDto
     */
    public function getLabourComponents()
    {
        return $this->container['labour_components'];
    }

    /**
     * Sets labour_components
     *
     * @param \Dangl\AVACloud\Model\LabourPriceComponentDto $labour_components The components for labour time in this Position.
     *
     * @return $this
     */
    public function setLabourComponents($labour_components)
    {
        $this->container['labour_components'] = $labour_components;

        return $this;
    }

    /**
     * Gets price_components
     *
     * @return \Dangl\AVACloud\Model\PriceComponentDto[]
     */
    public function getPriceComponents()
    {
        return $this->container['price_components'];
    }

    /**
     * Sets price_components
     *
     * @param \Dangl\AVACloud\Model\PriceComponentDto[] $price_components The single price components in this Position. Price components should not be handled directly on a per-position basis but set globally in the parent Projects ProjectInformation.
     *
     * @return $this
     */
    public function setPriceComponents($price_components)
    {
        $this->container['price_components'] = $price_components;

        return $this;
    }

    /**
     * Gets quantity_components
     *
     * @return \Dangl\AVACloud\Model\CalculationDto[]
     */
    public function getQuantityComponents()
    {
        return $this->container['quantity_components'];
    }

    /**
     * Sets quantity_components
     *
     * @param \Dangl\AVACloud\Model\CalculationDto[] $quantity_components The quantity components of this Position.
     *
     * @return $this
     */
    public function setQuantityComponents($quantity_components)
    {
        $this->container['quantity_components'] = $quantity_components;

        return $this;
    }

    /**
     * Gets sub_descriptions
     *
     * @return \Dangl\AVACloud\Model\SubDescriptionDto[]
     */
    public function getSubDescriptions()
    {
        return $this->container['sub_descriptions'];
    }

    /**
     * Sets sub_descriptions
     *
     * @param \Dangl\AVACloud\Model\SubDescriptionDto[] $sub_descriptions Further structuring of this Position.
     *
     * @return $this
     */
    public function setSubDescriptions($sub_descriptions)
    {
        $this->container['sub_descriptions'] = $sub_descriptions;

        return $this;
    }

    /**
     * Gets comission_status
     *
     * @return \Dangl\AVACloud\Model\ComissionStatusDto
     */
    public function getComissionStatus()
    {
        return $this->container['comission_status'];
    }

    /**
     * Sets comission_status
     *
     * @param \Dangl\AVACloud\Model\ComissionStatusDto $comission_status Indicates the status of this Position's comission.
     *
     * @return $this
     */
    public function setComissionStatus($comission_status)
    {
        $this->container['comission_status'] = $comission_status;

        return $this;
    }

    /**
     * Gets complemented_by
     *
     * @return string[]
     */
    public function getComplementedBy()
    {
        return $this->container['complemented_by'];
    }

    /**
     * Sets complemented_by
     *
     * @param string[] $complemented_by A list of positions that complement this Position. The positions are referenced by their GUIDs. It might be used together with ComplementedByQuantities in case that only a given quantity is complemented by positions.
     *
     * @return $this
     */
    public function setComplementedBy($complemented_by)
    {
        $this->container['complemented_by'] = $complemented_by;

        return $this;
    }

    /**
     * Gets complemented
     *
     * @return bool
     */
    public function getComplemented()
    {
        return $this->container['complemented'];
    }

    /**
     * Sets complemented
     *
     * @param bool $complemented Will indicate if this Position is complemented in this ServiceSpecification by other Positions. It can not be set to false when there are entries in the ComplementedBy property.
     *
     * @return $this
     */
    public function setComplemented($complemented)
    {
        $this->container['complemented'] = $complemented;

        return $this;
    }

    /**
     * Gets amount_to_be_entered_by_bidder
     *
     * @return bool
     */
    public function getAmountToBeEnteredByBidder()
    {
        return $this->container['amount_to_be_entered_by_bidder'];
    }

    /**
     * Sets amount_to_be_entered_by_bidder
     *
     * @param bool $amount_to_be_entered_by_bidder Indicates that the amount for this Position is to be set by the bidder.
     *
     * @return $this
     */
    public function setAmountToBeEnteredByBidder($amount_to_be_entered_by_bidder)
    {
        $this->container['amount_to_be_entered_by_bidder'] = $amount_to_be_entered_by_bidder;

        return $this;
    }

    /**
     * Gets price_composition_required
     *
     * @return bool
     */
    public function getPriceCompositionRequired()
    {
        return $this->container['price_composition_required'];
    }

    /**
     * Sets price_composition_required
     *
     * @param bool $price_composition_required Indicates if the bidder demands for prices to be broken up into their price components.
     *
     * @return $this
     */
    public function setPriceCompositionRequired($price_composition_required)
    {
        $this->container['price_composition_required'] = $price_composition_required;

        return $this;
    }

    /**
     * Gets use_different_tax_rate
     *
     * @return bool
     */
    public function getUseDifferentTaxRate()
    {
        return $this->container['use_different_tax_rate'];
    }

    /**
     * Sets use_different_tax_rate
     *
     * @param bool $use_different_tax_rate Indicates if this Position should use a different TaxRate than what is the default for the Project.
     *
     * @return $this
     */
    public function setUseDifferentTaxRate($use_different_tax_rate)
    {
        $this->container['use_different_tax_rate'] = $use_different_tax_rate;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate Will return either the parent ServiceSpecification's TaxRate or it's own if it has a different value. (For example, in Germany Water has a different TaxRate than regular Positions)
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return \Dangl\AVACloud\Model\ItemNumberDto
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param \Dangl\AVACloud\Model\ItemNumberDto $item_number The ItemNumber for this Position.
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets deduction_factor
     *
     * @return float
     */
    public function getDeductionFactor()
    {
        return $this->container['deduction_factor'];
    }

    /**
     * Sets deduction_factor
     *
     * @param float $deduction_factor The rate of deductions, i.e. 0.12m means 12% price deduction.
     *
     * @return $this
     */
    public function setDeductionFactor($deduction_factor)
    {
        $this->container['deduction_factor'] = $deduction_factor;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Returns the product of UnitPrice times Quantity.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross The total gross price for this Position.
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_price_gross_deducted
     *
     * @return float
     */
    public function getTotalPriceGrossDeducted()
    {
        return $this->container['total_price_gross_deducted'];
    }

    /**
     * Sets total_price_gross_deducted
     *
     * @param float $total_price_gross_deducted Total gross price after applied deductions.
     *
     * @return $this
     */
    public function setTotalPriceGrossDeducted($total_price_gross_deducted)
    {
        $this->container['total_price_gross_deducted'] = $total_price_gross_deducted;

        return $this;
    }

    /**
     * Gets deducted_price
     *
     * @return float
     */
    public function getDeductedPrice()
    {
        return $this->container['deducted_price'];
    }

    /**
     * Sets deducted_price
     *
     * @param float $deducted_price Net price after applied deductions. Please be aware that this is the total price, from TotalPrice, not the unit price of the position.
     *
     * @return $this
     */
    public function setDeductedPrice($deducted_price)
    {
        $this->container['deducted_price'] = $deducted_price;

        return $this;
    }

    /**
     * Gets position_type
     *
     * @return \Dangl\AVACloud\Model\PositionTypeDto
     */
    public function getPositionType()
    {
        return $this->container['position_type'];
    }

    /**
     * Sets position_type
     *
     * @param \Dangl\AVACloud\Model\PositionTypeDto $position_type This indicates the type of a position. If this is an alternative position, its AlternativeTo property should be set to the id of the position it can replace.
     *
     * @return $this
     */
    public function setPositionType($position_type)
    {
        $this->container['position_type'] = $position_type;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \Dangl\AVACloud\Model\PriceTypeDto
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \Dangl\AVACloud\Model\PriceTypeDto $price_type Indicates the PriceType of this Position.
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return \Dangl\AVACloud\Model\ServiceTypeDto
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param \Dangl\AVACloud\Model\ServiceTypeDto $service_type This indicates if this position is regular or describing a labour / hourly paid work service
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets product_data
     *
     * @return \Dangl\AVACloud\Model\ProductDataDto
     */
    public function getProductData()
    {
        return $this->container['product_data'];
    }

    /**
     * Sets product_data
     *
     * @param \Dangl\AVACloud\Model\ProductDataDto $product_data This property describes additional information about a product being used within this Position. For example, a pipe position, per length unit, could be composed of different pipe segments, fitting and other accessory articles.
     *
     * @return $this
     */
    public function setProductData($product_data)
    {
        $this->container['product_data'] = $product_data;

        return $this;
    }

    /**
     * Gets short_text
     *
     * @return string
     */
    public function getShortText()
    {
        return $this->container['short_text'];
    }

    /**
     * Sets short_text
     *
     * @param string $short_text Short description for this DescriptionBase element.
     *
     * @return $this
     */
    public function setShortText($short_text)
    {
        $this->container['short_text'] = $short_text;

        return $this;
    }

    /**
     * Gets long_text
     *
     * @return string
     */
    public function getLongText()
    {
        return $this->container['long_text'];
    }

    /**
     * Sets long_text
     *
     * @param string $long_text Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
     *
     * @return $this
     */
    public function setLongText($long_text)
    {
        $this->container['long_text'] = $long_text;

        return $this;
    }

    /**
     * Gets html_long_text
     *
     * @return string
     */
    public function getHtmlLongText()
    {
        return $this->container['html_long_text'];
    }

    /**
     * Sets html_long_text
     *
     * @param string $html_long_text This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
     *
     * @return $this
     */
    public function setHtmlLongText($html_long_text)
    {
        $this->container['html_long_text'] = $html_long_text;

        return $this;
    }

    /**
     * Gets addition_type
     *
     * @return \Dangl\AVACloud\Model\AdditionTypeDto
     */
    public function getAdditionType()
    {
        return $this->container['addition_type'];
    }

    /**
     * Sets addition_type
     *
     * @param \Dangl\AVACloud\Model\AdditionTypeDto $addition_type Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
     *
     * @return $this
     */
    public function setAdditionType($addition_type)
    {
        $this->container['addition_type'] = $addition_type;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type element_type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets quantity_assignments
     *
     * @return \Dangl\AVACloud\Model\QuantityAssignmentDto[]
     */
    public function getQuantityAssignments()
    {
        return $this->container['quantity_assignments'];
    }

    /**
     * Sets quantity_assignments
     *
     * @param \Dangl\AVACloud\Model\QuantityAssignmentDto[] $quantity_assignments Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of this Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.
     *
     * @return $this
     */
    public function setQuantityAssignments($quantity_assignments)
    {
        $this->container['quantity_assignments'] = $quantity_assignments;

        return $this;
    }

    /**
     * Gets commerce_properties
     *
     * @return \Dangl\AVACloud\Model\CommercePropertiesDto
     */
    public function getCommerceProperties()
    {
        return $this->container['commerce_properties'];
    }

    /**
     * Sets commerce_properties
     *
     * @param \Dangl\AVACloud\Model\CommercePropertiesDto $commerce_properties The CommerceProperties support specialized information that is only useful in GAEB XML 9x data exchange phases. It is intended to provide article information.
     *
     * @return $this
     */
    public function setCommerceProperties($commerce_properties)
    {
        $this->container['commerce_properties'] = $commerce_properties;

        return $this;
    }

    /**
     * Gets alternative_to
     *
     * @return string
     */
    public function getAlternativeTo()
    {
        return $this->container['alternative_to'];
    }

    /**
     * Sets alternative_to
     *
     * @param string $alternative_to If this position is an Alternative, then this property should point to the id of the position in this service specification that it can replace. If this is set to a value, you can optionally also specify an identifier via AlternativeIdentifier to specifiy multiple positions that must be used together to be an alternative to a single base position.
     *
     * @return $this
     */
    public function setAlternativeTo($alternative_to)
    {
        $this->container['alternative_to'] = $alternative_to;

        return $this;
    }

    /**
     * Gets alternative_identifier
     *
     * @return int
     */
    public function getAlternativeIdentifier()
    {
        return $this->container['alternative_identifier'];
    }

    /**
     * Sets alternative_identifier
     *
     * @param int $alternative_identifier This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific position is assigned to. That way, if you specifiy multiple alternative Positions with the same AlternativeIdentifier, you can indicate that to replace a single base Position, multiple alternative Positions should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
     *
     * @return $this
     */
    public function setAlternativeIdentifier($alternative_identifier)
    {
        $this->container['alternative_identifier'] = $alternative_identifier;

        return $this;
    }

    /**
     * Gets alternative_group_identifier
     *
     * @return int
     */
    public function getAlternativeGroupIdentifier()
    {
        return $this->container['alternative_group_identifier'];
    }

    /**
     * Sets alternative_group_identifier
     *
     * @param int $alternative_group_identifier This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific position is assigned to. That way, you can specify the id (in integer format) for the alternative group this position belongs to. It's different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a position only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base position for a specific group. This was introduced in version v2.9.0 to be able to model both position and group ids for alternative group combinations. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
     *
     * @return $this
     */
    public function setAlternativeGroupIdentifier($alternative_group_identifier)
    {
        $this->container['alternative_group_identifier'] = $alternative_group_identifier;

        return $this;
    }

    /**
     * Gets is_lump_sum
     *
     * @return bool
     */
    public function getIsLumpSum()
    {
        return $this->container['is_lump_sum'];
    }

    /**
     * Sets is_lump_sum
     *
     * @param bool $is_lump_sum If this is true, it indicates that the position is intended to be a lump sum, \"Pauschal\" in German. This means the position total price that is being invoiced should not depend on the actual quantity. In practice, partial invoices are still often used for partial services rendered. This property does not affect the price calculation for this position. Typically, the Quantity should be set to 1.0 when this flag is used.
     *
     * @return $this
     */
    public function setIsLumpSum($is_lump_sum)
    {
        $this->container['is_lump_sum'] = $is_lump_sum;

        return $this;
    }

    /**
     * Gets repetition_to
     *
     * @return string
     */
    public function getRepetitionTo()
    {
        return $this->container['repetition_to'];
    }

    /**
     * Sets repetition_to
     *
     * @param string $repetition_to This identifier can be used to point to the Id of a position in the same ServiceSpecification that acts as a base position. It matches \"Bezugsposition\" in GAEB. This can be used for positions that repeat partially or are linked together
     *
     * @return $this
     */
    public function setRepetitionTo($repetition_to)
    {
        $this->container['repetition_to'] = $repetition_to;

        return $this;
    }

    /**
     * Gets standardized_description
     *
     * @return \Dangl\AVACloud\Model\StandardizedDescriptionDto
     */
    public function getStandardizedDescription()
    {
        return $this->container['standardized_description'];
    }

    /**
     * Sets standardized_description
     *
     * @param \Dangl\AVACloud\Model\StandardizedDescriptionDto $standardized_description This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
     *
     * @return $this
     */
    public function setStandardizedDescription($standardized_description)
    {
        $this->container['standardized_description'] = $standardized_description;

        return $this;
    }

    /**
     * Gets complemented_by_quantities
     *
     * @return \Dangl\AVACloud\Model\ComplementedByQuantityDto[]
     */
    public function getComplementedByQuantities()
    {
        return $this->container['complemented_by_quantities'];
    }

    /**
     * Sets complemented_by_quantities
     *
     * @param \Dangl\AVACloud\Model\ComplementedByQuantityDto[] $complemented_by_quantities This list contains references to positions that complement this one, additionally also specifying a quantity for which the addition is intended. This does not replace the ComplementedBy property and there are no automatic checks being done between these two properties, so it's up to the user code to ensure deletions (and additions, if desired) are performed for both properties. When copying withing keeping Ids, this list will not be part of the copy process, since it would only contain quantities without actual position references. Containers, however, will rebuild the list with updated position references when copying positions that contain entries here.
     *
     * @return $this
     */
    public function setComplementedByQuantities($complemented_by_quantities)
    {
        $this->container['complemented_by_quantities'] = $complemented_by_quantities;

        return $this;
    }

    /**
     * Gets execution_description_reference
     *
     * @return string
     */
    public function getExecutionDescriptionReference()
    {
        return $this->container['execution_description_reference'];
    }

    /**
     * Sets execution_description_reference
     *
     * @param string $execution_description_reference This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions should be executed in practice. Often, the position itself still has text of its own to highlight deviations from that or add more details.
     *
     * @return $this
     */
    public function setExecutionDescriptionReference($execution_description_reference)
    {
        $this->container['execution_description_reference'] = $execution_description_reference;

        return $this;
    }

    /**
     * Gets not_offered
     *
     * @return bool
     */
    public function getNotOffered()
    {
        return $this->container['not_offered'];
    }

    /**
     * Sets not_offered
     *
     * @param bool $not_offered This indicates if a position has not been offered. This is typically only expected to be true when the exchange phase of the parent ServiceSpecification is Offer, and it means that the position has not been offered at all.
     *
     * @return $this
     */
    public function setNotOffered($not_offered)
    {
        $this->container['not_offered'] = $not_offered;

        return $this;
    }

    /**
     * Gets oenorm_position_properties
     *
     * @return \Dangl\AVACloud\Model\OenormPositionPropertiesDto
     */
    public function getOenormPositionProperties()
    {
        return $this->container['oenorm_position_properties'];
    }

    /**
     * Sets oenorm_position_properties
     *
     * @param \Dangl\AVACloud\Model\OenormPositionPropertiesDto $oenorm_position_properties This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.
     *
     * @return $this
     */
    public function setOenormPositionProperties($oenorm_position_properties)
    {
        $this->container['oenorm_position_properties'] = $oenorm_position_properties;

        return $this;
    }

    /**
     * Gets description_id
     *
     * @return string
     */
    public function getDescriptionId()
    {
        return $this->container['description_id'];
    }

    /**
     * Sets description_id
     *
     * @param string $description_id This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.
     *
     * @return $this
     */
    public function setDescriptionId($description_id)
    {
        $this->container['description_id'] = $description_id;

        return $this;
    }

    /**
     * Gets hierarchy_level
     *
     * @return int
     */
    public function getHierarchyLevel()
    {
        return $this->container['hierarchy_level'];
    }

    /**
     * Sets hierarchy_level
     *
     * @param int $hierarchy_level This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.
     *
     * @return $this
     */
    public function setHierarchyLevel($hierarchy_level)
    {
        $this->container['hierarchy_level'] = $hierarchy_level;

        return $this;
    }

    /**
     * Gets addendum_status
     *
     * @return \Dangl\AVACloud\Model\AddendumStatusDto
     */
    public function getAddendumStatus()
    {
        return $this->container['addendum_status'];
    }

    /**
     * Sets addendum_status
     *
     * @param \Dangl\AVACloud\Model\AddendumStatusDto $addendum_status This indicates, if this element is part of an addendum an, if yes, with what status.
     *
     * @return $this
     */
    public function setAddendumStatus($addendum_status)
    {
        $this->container['addendum_status'] = $addendum_status;

        return $this;
    }

    /**
     * Gets has_bidder_comment_in_html_long_text
     *
     * @return bool
     */
    public function getHasBidderCommentInHtmlLongText()
    {
        return $this->container['has_bidder_comment_in_html_long_text'];
    }

    /**
     * Sets has_bidder_comment_in_html_long_text
     *
     * @param bool $has_bidder_comment_in_html_long_text has_bidder_comment_in_html_long_text
     *
     * @return $this
     */
    public function setHasBidderCommentInHtmlLongText($has_bidder_comment_in_html_long_text)
    {
        $this->container['has_bidder_comment_in_html_long_text'] = $has_bidder_comment_in_html_long_text;

        return $this;
    }

    /**
     * Gets gaeb_complementing_type
     *
     * @return \Dangl\AVACloud\Model\PositionComplementingTypeDto
     */
    public function getGaebComplementingType()
    {
        return $this->container['gaeb_complementing_type'];
    }

    /**
     * Sets gaeb_complementing_type
     *
     * @param \Dangl\AVACloud\Model\PositionComplementingTypeDto $gaeb_complementing_type This property can optionally be used in GAEB exchange scenarios. It is only meaningful if this position itself is a complementing position, meaning if this position is marked in other positions in their ComplementedBy list. Then, it specifies how the complementing should be expressed in GAEB. By default, positions are always explicitly referenced, but other options are possible. Please also note that the Dangl.AVA.Converter package, which is used for GAEB exports, will check if the given type is valid in the current project configuration. If not, directly referenced positions will be used as fallback.
     *
     * @return $this
     */
    public function setGaebComplementingType($gaeb_complementing_type)
    {
        $this->container['gaeb_complementing_type'] = $gaeb_complementing_type;

        return $this;
    }

    /**
     * Gets hold_out_properties
     *
     * @return \Dangl\AVACloud\Model\PositionHoldOutPropertiesDto
     */
    public function getHoldOutProperties()
    {
        return $this->container['hold_out_properties'];
    }

    /**
     * Sets hold_out_properties
     *
     * @param \Dangl\AVACloud\Model\PositionHoldOutPropertiesDto $hold_out_properties HoldOut properties describe services that are to be provided and maintained for a specific time, e.g. fences on a construction site.
     *
     * @return $this
     */
    public function setHoldOutProperties($hold_out_properties)
    {
        $this->container['hold_out_properties'] = $hold_out_properties;

        return $this;
    }

    /**
     * Gets estimated_quantity
     *
     * @return float
     */
    public function getEstimatedQuantity()
    {
        return $this->container['estimated_quantity'];
    }

    /**
     * Sets estimated_quantity
     *
     * @param float $estimated_quantity This is an informational property, which directly holds a numerical value for an estimated quantity. It is not used for any price calculations.
     *
     * @return $this
     */
    public function setEstimatedQuantity($estimated_quantity)
    {
        $this->container['estimated_quantity'] = $estimated_quantity;

        return $this;
    }

    /**
     * Gets price_catalogue_data
     *
     * @return \Dangl\AVACloud\Model\PriceCatalogueDataDto
     */
    public function getPriceCatalogueData()
    {
        return $this->container['price_catalogue_data'];
    }

    /**
     * Sets price_catalogue_data
     *
     * @param \Dangl\AVACloud\Model\PriceCatalogueDataDto $price_catalogue_data This is an optional property that holds price catalogue data. These are prices that may represent an estimate, and they typically come from a price catalogue.
     *
     * @return $this
     */
    public function setPriceCatalogueData($price_catalogue_data)
    {
        $this->container['price_catalogue_data'] = $price_catalogue_data;

        return $this;
    }

    /**
     * Gets ignore_project_catalogue_propagation
     *
     * @return bool
     */
    public function getIgnoreProjectCataloguePropagation()
    {
        return $this->container['ignore_project_catalogue_propagation'];
    }

    /**
     * Sets ignore_project_catalogue_propagation
     *
     * @param bool $ignore_project_catalogue_propagation If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties.
     *
     * @return $this
     */
    public function setIgnoreProjectCataloguePropagation($ignore_project_catalogue_propagation)
    {
        $this->container['ignore_project_catalogue_propagation'] = $ignore_project_catalogue_propagation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


