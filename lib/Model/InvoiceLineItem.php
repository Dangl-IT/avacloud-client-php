<?php
/**
 * InvoiceLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * InvoiceLineItem Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identifier' => 'string',
        'note' => 'string',
        'object_identifier' => 'string',
        'quantity' => 'float',
        'unit_code' => 'string',
        'net_amount' => 'float',
        'purchase_order_reference' => 'string',
        'line_item_period' => '\Dangl\AVACloud\Model\InvoicePeriod',
        'allowances' => '\Dangl\AVACloud\Model\LineItemAllowance[]',
        'charges' => '\Dangl\AVACloud\Model\LineItemCharge[]',
        'price_details' => '\Dangl\AVACloud\Model\LineItemPriceDetail',
        'vat_information' => '\Dangl\AVACloud\Model\LineItemVatInformation[]',
        'item_information' => '\Dangl\AVACloud\Model\LineItemInformation',
        'sub_items' => '\Dangl\AVACloud\Model\InvoiceLineItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'identifier' => null,
        'note' => null,
        'object_identifier' => null,
        'quantity' => 'decimal',
        'unit_code' => null,
        'net_amount' => 'decimal',
        'purchase_order_reference' => null,
        'line_item_period' => null,
        'allowances' => null,
        'charges' => null,
        'price_details' => null,
        'vat_information' => null,
        'item_information' => null,
        'sub_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'note' => 'note',
        'object_identifier' => 'objectIdentifier',
        'quantity' => 'quantity',
        'unit_code' => 'unitCode',
        'net_amount' => 'netAmount',
        'purchase_order_reference' => 'purchaseOrderReference',
        'line_item_period' => 'lineItemPeriod',
        'allowances' => 'allowances',
        'charges' => 'charges',
        'price_details' => 'priceDetails',
        'vat_information' => 'vatInformation',
        'item_information' => 'itemInformation',
        'sub_items' => 'subItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'note' => 'setNote',
        'object_identifier' => 'setObjectIdentifier',
        'quantity' => 'setQuantity',
        'unit_code' => 'setUnitCode',
        'net_amount' => 'setNetAmount',
        'purchase_order_reference' => 'setPurchaseOrderReference',
        'line_item_period' => 'setLineItemPeriod',
        'allowances' => 'setAllowances',
        'charges' => 'setCharges',
        'price_details' => 'setPriceDetails',
        'vat_information' => 'setVatInformation',
        'item_information' => 'setItemInformation',
        'sub_items' => 'setSubItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'note' => 'getNote',
        'object_identifier' => 'getObjectIdentifier',
        'quantity' => 'getQuantity',
        'unit_code' => 'getUnitCode',
        'net_amount' => 'getNetAmount',
        'purchase_order_reference' => 'getPurchaseOrderReference',
        'line_item_period' => 'getLineItemPeriod',
        'allowances' => 'getAllowances',
        'charges' => 'getCharges',
        'price_details' => 'getPriceDetails',
        'vat_information' => 'getVatInformation',
        'item_information' => 'getItemInformation',
        'sub_items' => 'getSubItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['object_identifier'] = isset($data['object_identifier']) ? $data['object_identifier'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_code'] = isset($data['unit_code']) ? $data['unit_code'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['purchase_order_reference'] = isset($data['purchase_order_reference']) ? $data['purchase_order_reference'] : null;
        $this->container['line_item_period'] = isset($data['line_item_period']) ? $data['line_item_period'] : null;
        $this->container['allowances'] = isset($data['allowances']) ? $data['allowances'] : null;
        $this->container['charges'] = isset($data['charges']) ? $data['charges'] : null;
        $this->container['price_details'] = isset($data['price_details']) ? $data['price_details'] : null;
        $this->container['vat_information'] = isset($data['vat_information']) ? $data['vat_information'] : null;
        $this->container['item_information'] = isset($data['item_information']) ? $data['item_information'] : null;
        $this->container['sub_items'] = isset($data['sub_items']) ? $data['sub_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets object_identifier
     *
     * @return string
     */
    public function getObjectIdentifier()
    {
        return $this->container['object_identifier'];
    }

    /**
     * Sets object_identifier
     *
     * @param string $object_identifier object_identifier
     *
     * @return $this
     */
    public function setObjectIdentifier($object_identifier)
    {
        $this->container['object_identifier'] = $object_identifier;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_code
     *
     * @return string
     */
    public function getUnitCode()
    {
        return $this->container['unit_code'];
    }

    /**
     * Sets unit_code
     *
     * @param string $unit_code unit_code
     *
     * @return $this
     */
    public function setUnitCode($unit_code)
    {
        $this->container['unit_code'] = $unit_code;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float $net_amount net_amount
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets purchase_order_reference
     *
     * @return string
     */
    public function getPurchaseOrderReference()
    {
        return $this->container['purchase_order_reference'];
    }

    /**
     * Sets purchase_order_reference
     *
     * @param string $purchase_order_reference purchase_order_reference
     *
     * @return $this
     */
    public function setPurchaseOrderReference($purchase_order_reference)
    {
        $this->container['purchase_order_reference'] = $purchase_order_reference;

        return $this;
    }

    /**
     * Gets line_item_period
     *
     * @return \Dangl\AVACloud\Model\InvoicePeriod
     */
    public function getLineItemPeriod()
    {
        return $this->container['line_item_period'];
    }

    /**
     * Sets line_item_period
     *
     * @param \Dangl\AVACloud\Model\InvoicePeriod $line_item_period line_item_period
     *
     * @return $this
     */
    public function setLineItemPeriod($line_item_period)
    {
        $this->container['line_item_period'] = $line_item_period;

        return $this;
    }

    /**
     * Gets allowances
     *
     * @return \Dangl\AVACloud\Model\LineItemAllowance[]
     */
    public function getAllowances()
    {
        return $this->container['allowances'];
    }

    /**
     * Sets allowances
     *
     * @param \Dangl\AVACloud\Model\LineItemAllowance[] $allowances allowances
     *
     * @return $this
     */
    public function setAllowances($allowances)
    {
        $this->container['allowances'] = $allowances;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Dangl\AVACloud\Model\LineItemCharge[]
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Dangl\AVACloud\Model\LineItemCharge[] $charges charges
     *
     * @return $this
     */
    public function setCharges($charges)
    {
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets price_details
     *
     * @return \Dangl\AVACloud\Model\LineItemPriceDetail
     */
    public function getPriceDetails()
    {
        return $this->container['price_details'];
    }

    /**
     * Sets price_details
     *
     * @param \Dangl\AVACloud\Model\LineItemPriceDetail $price_details price_details
     *
     * @return $this
     */
    public function setPriceDetails($price_details)
    {
        $this->container['price_details'] = $price_details;

        return $this;
    }

    /**
     * Gets vat_information
     *
     * @return \Dangl\AVACloud\Model\LineItemVatInformation[]
     */
    public function getVatInformation()
    {
        return $this->container['vat_information'];
    }

    /**
     * Sets vat_information
     *
     * @param \Dangl\AVACloud\Model\LineItemVatInformation[] $vat_information vat_information
     *
     * @return $this
     */
    public function setVatInformation($vat_information)
    {
        $this->container['vat_information'] = $vat_information;

        return $this;
    }

    /**
     * Gets item_information
     *
     * @return \Dangl\AVACloud\Model\LineItemInformation
     */
    public function getItemInformation()
    {
        return $this->container['item_information'];
    }

    /**
     * Sets item_information
     *
     * @param \Dangl\AVACloud\Model\LineItemInformation $item_information item_information
     *
     * @return $this
     */
    public function setItemInformation($item_information)
    {
        $this->container['item_information'] = $item_information;

        return $this;
    }

    /**
     * Gets sub_items
     *
     * @return \Dangl\AVACloud\Model\InvoiceLineItem[]
     */
    public function getSubItems()
    {
        return $this->container['sub_items'];
    }

    /**
     * Sets sub_items
     *
     * @param \Dangl\AVACloud\Model\InvoiceLineItem[] $sub_items sub_items
     *
     * @return $this
     */
    public function setSubItems($sub_items)
    {
        $this->container['sub_items'] = $sub_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


