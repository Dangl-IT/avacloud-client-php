<?php
/**
 * InvoiceCharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * InvoiceCharge Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceCharge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'net_amount' => 'float',
        'relative_charge_base_amount' => 'float',
        'relative_charge_percentage' => 'float',
        'vat_category' => '\Dangl\AVACloud\Model\VatCategory',
        'vat_rate' => 'float',
        'reason' => 'string',
        'reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'net_amount' => 'decimal',
        'relative_charge_base_amount' => 'decimal',
        'relative_charge_percentage' => 'decimal',
        'vat_category' => null,
        'vat_rate' => 'decimal',
        'reason' => null,
        'reason_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'net_amount' => 'netAmount',
        'relative_charge_base_amount' => 'relativeChargeBaseAmount',
        'relative_charge_percentage' => 'relativeChargePercentage',
        'vat_category' => 'vatCategory',
        'vat_rate' => 'vatRate',
        'reason' => 'reason',
        'reason_code' => 'reasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'net_amount' => 'setNetAmount',
        'relative_charge_base_amount' => 'setRelativeChargeBaseAmount',
        'relative_charge_percentage' => 'setRelativeChargePercentage',
        'vat_category' => 'setVatCategory',
        'vat_rate' => 'setVatRate',
        'reason' => 'setReason',
        'reason_code' => 'setReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'net_amount' => 'getNetAmount',
        'relative_charge_base_amount' => 'getRelativeChargeBaseAmount',
        'relative_charge_percentage' => 'getRelativeChargePercentage',
        'vat_category' => 'getVatCategory',
        'vat_rate' => 'getVatRate',
        'reason' => 'getReason',
        'reason_code' => 'getReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['relative_charge_base_amount'] = isset($data['relative_charge_base_amount']) ? $data['relative_charge_base_amount'] : null;
        $this->container['relative_charge_percentage'] = isset($data['relative_charge_percentage']) ? $data['relative_charge_percentage'] : null;
        $this->container['vat_category'] = isset($data['vat_category']) ? $data['vat_category'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vat_category'] === null) {
            $invalidProperties[] = "'vat_category' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets net_amount
     *
     * @return float
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float $net_amount net_amount
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets relative_charge_base_amount
     *
     * @return float
     */
    public function getRelativeChargeBaseAmount()
    {
        return $this->container['relative_charge_base_amount'];
    }

    /**
     * Sets relative_charge_base_amount
     *
     * @param float $relative_charge_base_amount relative_charge_base_amount
     *
     * @return $this
     */
    public function setRelativeChargeBaseAmount($relative_charge_base_amount)
    {
        $this->container['relative_charge_base_amount'] = $relative_charge_base_amount;

        return $this;
    }

    /**
     * Gets relative_charge_percentage
     *
     * @return float
     */
    public function getRelativeChargePercentage()
    {
        return $this->container['relative_charge_percentage'];
    }

    /**
     * Sets relative_charge_percentage
     *
     * @param float $relative_charge_percentage relative_charge_percentage
     *
     * @return $this
     */
    public function setRelativeChargePercentage($relative_charge_percentage)
    {
        $this->container['relative_charge_percentage'] = $relative_charge_percentage;

        return $this;
    }

    /**
     * Gets vat_category
     *
     * @return \Dangl\AVACloud\Model\VatCategory
     */
    public function getVatCategory()
    {
        return $this->container['vat_category'];
    }

    /**
     * Sets vat_category
     *
     * @param \Dangl\AVACloud\Model\VatCategory $vat_category vat_category
     *
     * @return $this
     */
    public function setVatCategory($vat_category)
    {
        $this->container['vat_category'] = $vat_category;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate vat_rate
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason_code
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


