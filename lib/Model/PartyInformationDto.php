<?php
/**
 * PartyInformationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.30.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.30.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * PartyInformationDto Class Doc Comment
 *
 * @category Class
 * @description Represents information about a party (a site or an organization).
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartyInformationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PartyInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'street' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country' => 'string',
        'identifier' => 'string',
        'remarks' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'contact_person_name' => 'string',
        'award_identifier' => 'string',
        'is_in_european_economic_area' => 'bool',
        'vat_id' => 'string',
        'fax' => 'string',
        'country_code' => 'string',
        'creditor_or_debtor_identifier' => 'string',
        'global_location_number' => 'string',
        'banking_information' => '\Dangl\AVACloud\Model\BankingInformationDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'name' => null,
        'street' => null,
        'zip_code' => null,
        'city' => null,
        'country' => null,
        'identifier' => null,
        'remarks' => null,
        'email' => null,
        'phone' => null,
        'contact_person_name' => null,
        'award_identifier' => null,
        'is_in_european_economic_area' => null,
        'vat_id' => null,
        'fax' => null,
        'country_code' => null,
        'creditor_or_debtor_identifier' => null,
        'global_location_number' => null,
        'banking_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'street' => 'street',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country' => 'country',
        'identifier' => 'identifier',
        'remarks' => 'remarks',
        'email' => 'email',
        'phone' => 'phone',
        'contact_person_name' => 'contactPersonName',
        'award_identifier' => 'awardIdentifier',
        'is_in_european_economic_area' => 'isInEuropeanEconomicArea',
        'vat_id' => 'vatId',
        'fax' => 'fax',
        'country_code' => 'countryCode',
        'creditor_or_debtor_identifier' => 'creditorOrDebtorIdentifier',
        'global_location_number' => 'globalLocationNumber',
        'banking_information' => 'bankingInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'street' => 'setStreet',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'identifier' => 'setIdentifier',
        'remarks' => 'setRemarks',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'contact_person_name' => 'setContactPersonName',
        'award_identifier' => 'setAwardIdentifier',
        'is_in_european_economic_area' => 'setIsInEuropeanEconomicArea',
        'vat_id' => 'setVatId',
        'fax' => 'setFax',
        'country_code' => 'setCountryCode',
        'creditor_or_debtor_identifier' => 'setCreditorOrDebtorIdentifier',
        'global_location_number' => 'setGlobalLocationNumber',
        'banking_information' => 'setBankingInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'street' => 'getStreet',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'identifier' => 'getIdentifier',
        'remarks' => 'getRemarks',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'contact_person_name' => 'getContactPersonName',
        'award_identifier' => 'getAwardIdentifier',
        'is_in_european_economic_area' => 'getIsInEuropeanEconomicArea',
        'vat_id' => 'getVatId',
        'fax' => 'getFax',
        'country_code' => 'getCountryCode',
        'creditor_or_debtor_identifier' => 'getCreditorOrDebtorIdentifier',
        'global_location_number' => 'getGlobalLocationNumber',
        'banking_information' => 'getBankingInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['award_identifier'] = isset($data['award_identifier']) ? $data['award_identifier'] : null;
        $this->container['is_in_european_economic_area'] = isset($data['is_in_european_economic_area']) ? $data['is_in_european_economic_area'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['creditor_or_debtor_identifier'] = isset($data['creditor_or_debtor_identifier']) ? $data['creditor_or_debtor_identifier'] : null;
        $this->container['global_location_number'] = isset($data['global_location_number']) ? $data['global_location_number'] : null;
        $this->container['banking_information'] = isset($data['banking_information']) ? $data['banking_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_in_european_economic_area'] === null) {
            $invalidProperties[] = "'is_in_european_economic_area' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Elements GUID identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name This party's name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street This party's street.
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code This party's ZipCode.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city This party's City.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country This party's Country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier This party's Identifier.
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks Remarks for this party.
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email An email address for this party.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone A phone number for this party.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name The name of a contact person.
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets award_identifier
     *
     * @return string
     */
    public function getAwardIdentifier()
    {
        return $this->container['award_identifier'];
    }

    /**
     * Sets award_identifier
     *
     * @param string $award_identifier This is an identifier related to this PartyInformation and their internal reference of the tender (or award). This might be used to assign an identifier (German \"Vergabenummer\") for the current project. This is typically only used in Buyer and Bidder representations and should map to the concept of \"Vergabenummer\" or \"AwardNo\" in GAEB.
     *
     * @return $this
     */
    public function setAwardIdentifier($award_identifier)
    {
        $this->container['award_identifier'] = $award_identifier;

        return $this;
    }

    /**
     * Gets is_in_european_economic_area
     *
     * @return bool
     */
    public function getIsInEuropeanEconomicArea()
    {
        return $this->container['is_in_european_economic_area'];
    }

    /**
     * Sets is_in_european_economic_area
     *
     * @param bool $is_in_european_economic_area This property indicates if the party is registered within the European Economic Area.
     *
     * @return $this
     */
    public function setIsInEuropeanEconomicArea($is_in_european_economic_area)
    {
        $this->container['is_in_european_economic_area'] = $is_in_european_economic_area;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id If this is within the European Economic Area (see IsInEuropeanEconomicArea, then as a business entity it likely has an EU VAT Id.
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax The fax number for this party.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The two letter ISO country code, e.g. DE for Germany.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets creditor_or_debtor_identifier
     *
     * @return string
     */
    public function getCreditorOrDebtorIdentifier()
    {
        return $this->container['creditor_or_debtor_identifier'];
    }

    /**
     * Sets creditor_or_debtor_identifier
     *
     * @param string $creditor_or_debtor_identifier Depending on which party this class represents, it might have either a 'creditor' or 'debtor' number. This is often used in internal accounting systems.
     *
     * @return $this
     */
    public function setCreditorOrDebtorIdentifier($creditor_or_debtor_identifier)
    {
        $this->container['creditor_or_debtor_identifier'] = $creditor_or_debtor_identifier;

        return $this;
    }

    /**
     * Gets global_location_number
     *
     * @return string
     */
    public function getGlobalLocationNumber()
    {
        return $this->container['global_location_number'];
    }

    /**
     * Sets global_location_number
     *
     * @param string $global_location_number The Global Location Number (GLN) is issued by GS1 and is intended to be a unique identifier for the physical address of a party, e.g. a business office.
     *
     * @return $this
     */
    public function setGlobalLocationNumber($global_location_number)
    {
        $this->container['global_location_number'] = $global_location_number;

        return $this;
    }

    /**
     * Gets banking_information
     *
     * @return \Dangl\AVACloud\Model\BankingInformationDto[]
     */
    public function getBankingInformation()
    {
        return $this->container['banking_information'];
    }

    /**
     * Sets banking_information
     *
     * @param \Dangl\AVACloud\Model\BankingInformationDto[] $banking_information This list contains information about bank accounts associated with this PartyInformation. It's typically used for buyers and bidders.
     *
     * @return $this
     */
    public function setBankingInformation($banking_information)
    {
        $this->container['banking_information'] = $banking_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


