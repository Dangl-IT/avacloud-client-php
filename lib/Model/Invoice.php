<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.52.1
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.52.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_number' => 'string',
        'invoice_date' => '\DateTime',
        'invoice_type' => '\Dangl\AVACloud\Model\InvoiceType',
        'currency_code' => 'string',
        'payment_due_date' => '\DateTime',
        'references' => '\Dangl\AVACloud\Model\References',
        'payment_terms' => 'string',
        'previous_invoices' => '\Dangl\AVACloud\Model\PreviousInvoice[]',
        'buyer' => '\Dangl\AVACloud\Model\Organization',
        'seller' => '\Dangl\AVACloud\Model\Organization',
        'payee' => '\Dangl\AVACloud\Model\Payee',
        'invoice_notes' => '\Dangl\AVACloud\Model\InvoiceNote[]',
        'invoice_period' => '\Dangl\AVACloud\Model\InvoicePeriod',
        'totals' => '\Dangl\AVACloud\Model\InvoiceTotals',
        'payment_instructions' => '\Dangl\AVACloud\Model\PaymentInstructions',
        'documents' => '\Dangl\AVACloud\Model\SupportingDocument[]',
        'vat_breakdown' => '\Dangl\AVACloud\Model\VatBreakdown[]',
        'allowances' => '\Dangl\AVACloud\Model\InvoiceAllowance[]',
        'charges' => '\Dangl\AVACloud\Model\InvoiceCharge[]',
        'line_items' => '\Dangl\AVACloud\Model\InvoiceLineItem[]',
        'source_type' => '\Dangl\AVACloud\Model\SourceType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_number' => null,
        'invoice_date' => 'date-time',
        'invoice_type' => null,
        'currency_code' => null,
        'payment_due_date' => 'date-time',
        'references' => null,
        'payment_terms' => null,
        'previous_invoices' => null,
        'buyer' => null,
        'seller' => null,
        'payee' => null,
        'invoice_notes' => null,
        'invoice_period' => null,
        'totals' => null,
        'payment_instructions' => null,
        'documents' => null,
        'vat_breakdown' => null,
        'allowances' => null,
        'charges' => null,
        'line_items' => null,
        'source_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'invoice_type' => 'invoiceType',
        'currency_code' => 'currencyCode',
        'payment_due_date' => 'paymentDueDate',
        'references' => 'references',
        'payment_terms' => 'paymentTerms',
        'previous_invoices' => 'previousInvoices',
        'buyer' => 'buyer',
        'seller' => 'seller',
        'payee' => 'payee',
        'invoice_notes' => 'invoiceNotes',
        'invoice_period' => 'invoicePeriod',
        'totals' => 'totals',
        'payment_instructions' => 'paymentInstructions',
        'documents' => 'documents',
        'vat_breakdown' => 'vatBreakdown',
        'allowances' => 'allowances',
        'charges' => 'charges',
        'line_items' => 'lineItems',
        'source_type' => 'sourceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'invoice_type' => 'setInvoiceType',
        'currency_code' => 'setCurrencyCode',
        'payment_due_date' => 'setPaymentDueDate',
        'references' => 'setReferences',
        'payment_terms' => 'setPaymentTerms',
        'previous_invoices' => 'setPreviousInvoices',
        'buyer' => 'setBuyer',
        'seller' => 'setSeller',
        'payee' => 'setPayee',
        'invoice_notes' => 'setInvoiceNotes',
        'invoice_period' => 'setInvoicePeriod',
        'totals' => 'setTotals',
        'payment_instructions' => 'setPaymentInstructions',
        'documents' => 'setDocuments',
        'vat_breakdown' => 'setVatBreakdown',
        'allowances' => 'setAllowances',
        'charges' => 'setCharges',
        'line_items' => 'setLineItems',
        'source_type' => 'setSourceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'invoice_type' => 'getInvoiceType',
        'currency_code' => 'getCurrencyCode',
        'payment_due_date' => 'getPaymentDueDate',
        'references' => 'getReferences',
        'payment_terms' => 'getPaymentTerms',
        'previous_invoices' => 'getPreviousInvoices',
        'buyer' => 'getBuyer',
        'seller' => 'getSeller',
        'payee' => 'getPayee',
        'invoice_notes' => 'getInvoiceNotes',
        'invoice_period' => 'getInvoicePeriod',
        'totals' => 'getTotals',
        'payment_instructions' => 'getPaymentInstructions',
        'documents' => 'getDocuments',
        'vat_breakdown' => 'getVatBreakdown',
        'allowances' => 'getAllowances',
        'charges' => 'getCharges',
        'line_items' => 'getLineItems',
        'source_type' => 'getSourceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['previous_invoices'] = isset($data['previous_invoices']) ? $data['previous_invoices'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['payee'] = isset($data['payee']) ? $data['payee'] : null;
        $this->container['invoice_notes'] = isset($data['invoice_notes']) ? $data['invoice_notes'] : null;
        $this->container['invoice_period'] = isset($data['invoice_period']) ? $data['invoice_period'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['payment_instructions'] = isset($data['payment_instructions']) ? $data['payment_instructions'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['vat_breakdown'] = isset($data['vat_breakdown']) ? $data['vat_breakdown'] : null;
        $this->container['allowances'] = isset($data['allowances']) ? $data['allowances'] : null;
        $this->container['charges'] = isset($data['charges']) ? $data['charges'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['source_type'] = isset($data['source_type']) ? $data['source_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source_type'] === null) {
            $invalidProperties[] = "'source_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \Dangl\AVACloud\Model\InvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \Dangl\AVACloud\Model\InvoiceType $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date payment_due_date
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Dangl\AVACloud\Model\References
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \Dangl\AVACloud\Model\References $references references
     *
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string $payment_terms payment_terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets previous_invoices
     *
     * @return \Dangl\AVACloud\Model\PreviousInvoice[]
     */
    public function getPreviousInvoices()
    {
        return $this->container['previous_invoices'];
    }

    /**
     * Sets previous_invoices
     *
     * @param \Dangl\AVACloud\Model\PreviousInvoice[] $previous_invoices previous_invoices
     *
     * @return $this
     */
    public function setPreviousInvoices($previous_invoices)
    {
        $this->container['previous_invoices'] = $previous_invoices;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Dangl\AVACloud\Model\Organization
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Dangl\AVACloud\Model\Organization $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Dangl\AVACloud\Model\Organization
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Dangl\AVACloud\Model\Organization $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return \Dangl\AVACloud\Model\Payee
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param \Dangl\AVACloud\Model\Payee $payee payee
     *
     * @return $this
     */
    public function setPayee($payee)
    {
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets invoice_notes
     *
     * @return \Dangl\AVACloud\Model\InvoiceNote[]
     */
    public function getInvoiceNotes()
    {
        return $this->container['invoice_notes'];
    }

    /**
     * Sets invoice_notes
     *
     * @param \Dangl\AVACloud\Model\InvoiceNote[] $invoice_notes invoice_notes
     *
     * @return $this
     */
    public function setInvoiceNotes($invoice_notes)
    {
        $this->container['invoice_notes'] = $invoice_notes;

        return $this;
    }

    /**
     * Gets invoice_period
     *
     * @return \Dangl\AVACloud\Model\InvoicePeriod
     */
    public function getInvoicePeriod()
    {
        return $this->container['invoice_period'];
    }

    /**
     * Sets invoice_period
     *
     * @param \Dangl\AVACloud\Model\InvoicePeriod $invoice_period invoice_period
     *
     * @return $this
     */
    public function setInvoicePeriod($invoice_period)
    {
        $this->container['invoice_period'] = $invoice_period;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \Dangl\AVACloud\Model\InvoiceTotals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \Dangl\AVACloud\Model\InvoiceTotals $totals totals
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets payment_instructions
     *
     * @return \Dangl\AVACloud\Model\PaymentInstructions
     */
    public function getPaymentInstructions()
    {
        return $this->container['payment_instructions'];
    }

    /**
     * Sets payment_instructions
     *
     * @param \Dangl\AVACloud\Model\PaymentInstructions $payment_instructions payment_instructions
     *
     * @return $this
     */
    public function setPaymentInstructions($payment_instructions)
    {
        $this->container['payment_instructions'] = $payment_instructions;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Dangl\AVACloud\Model\SupportingDocument[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Dangl\AVACloud\Model\SupportingDocument[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets vat_breakdown
     *
     * @return \Dangl\AVACloud\Model\VatBreakdown[]
     */
    public function getVatBreakdown()
    {
        return $this->container['vat_breakdown'];
    }

    /**
     * Sets vat_breakdown
     *
     * @param \Dangl\AVACloud\Model\VatBreakdown[] $vat_breakdown vat_breakdown
     *
     * @return $this
     */
    public function setVatBreakdown($vat_breakdown)
    {
        $this->container['vat_breakdown'] = $vat_breakdown;

        return $this;
    }

    /**
     * Gets allowances
     *
     * @return \Dangl\AVACloud\Model\InvoiceAllowance[]
     */
    public function getAllowances()
    {
        return $this->container['allowances'];
    }

    /**
     * Sets allowances
     *
     * @param \Dangl\AVACloud\Model\InvoiceAllowance[] $allowances allowances
     *
     * @return $this
     */
    public function setAllowances($allowances)
    {
        $this->container['allowances'] = $allowances;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Dangl\AVACloud\Model\InvoiceCharge[]
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Dangl\AVACloud\Model\InvoiceCharge[] $charges charges
     *
     * @return $this
     */
    public function setCharges($charges)
    {
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Dangl\AVACloud\Model\InvoiceLineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Dangl\AVACloud\Model\InvoiceLineItem[] $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return \Dangl\AVACloud\Model\SourceType
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param \Dangl\AVACloud\Model\SourceType $source_type source_type
     *
     * @return $this
     */
    public function setSourceType($source_type)
    {
        $this->container['source_type'] = $source_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


