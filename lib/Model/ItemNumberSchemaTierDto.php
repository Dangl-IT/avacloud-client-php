<?php
/**
 * ItemNumberSchemaTierDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AVACloud API 1.41.0
 *
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.31
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Dangl\AVACloud\Model;

use \ArrayAccess;
use \Dangl\AVACloud\ObjectSerializer;

/**
 * ItemNumberSchemaTierDto Class Doc Comment
 *
 * @category Class
 * @description Represents information about a single Tier in an ItemNumber.
 * @package  Dangl\AVACloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemNumberSchemaTierDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemNumberSchemaTierDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'length' => 'int',
        'type' => '\Dangl\AVACloud\Model\ItemNumberTypeDto',
        'tier_type' => '\Dangl\AVACloud\Model\ItemNumberSchemaTierTypeDto',
        'is_lot' => 'bool',
        'increment' => 'int',
        'tier_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'length' => 'int32',
        'type' => null,
        'tier_type' => null,
        'is_lot' => null,
        'increment' => 'int32',
        'tier_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'length' => 'length',
        'type' => 'type',
        'tier_type' => 'tierType',
        'is_lot' => 'isLot',
        'increment' => 'increment',
        'tier_name' => 'tierName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'length' => 'setLength',
        'type' => 'setType',
        'tier_type' => 'setTierType',
        'is_lot' => 'setIsLot',
        'increment' => 'setIncrement',
        'tier_name' => 'setTierName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'length' => 'getLength',
        'type' => 'getType',
        'tier_type' => 'getTierType',
        'is_lot' => 'getIsLot',
        'increment' => 'getIncrement',
        'tier_name' => 'getTierName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['tier_type'] = isset($data['tier_type']) ? $data['tier_type'] : null;
        $this->container['is_lot'] = isset($data['is_lot']) ? $data['is_lot'] : null;
        $this->container['increment'] = isset($data['increment']) ? $data['increment'] : null;
        $this->container['tier_name'] = isset($data['tier_name']) ? $data['tier_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['length'] === null) {
            $invalidProperties[] = "'length' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['tier_type'] === null) {
            $invalidProperties[] = "'tier_type' can't be null";
        }
        if ($this->container['is_lot'] === null) {
            $invalidProperties[] = "'is_lot' can't be null";
        }
        if ($this->container['increment'] === null) {
            $invalidProperties[] = "'increment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length The (maximum) length for this tier. Will not accept a length less than 1. Defaults to 1 if length less than one is specified.
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Dangl\AVACloud\Model\ItemNumberTypeDto
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Dangl\AVACloud\Model\ItemNumberTypeDto $type This ItemNumberSchemaTier's type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets tier_type
     *
     * @return \Dangl\AVACloud\Model\ItemNumberSchemaTierTypeDto
     */
    public function getTierType()
    {
        return $this->container['tier_type'];
    }

    /**
     * Sets tier_type
     *
     * @param \Dangl\AVACloud\Model\ItemNumberSchemaTierTypeDto $tier_type This specifies which ItemNumberSchemaTierType this tier represents. This can be, for example, a group tier / level, a position level or a lot level.
     *
     * @return $this
     */
    public function setTierType($tier_type)
    {
        $this->container['tier_type'] = $tier_type;

        return $this;
    }

    /**
     * Gets is_lot
     *
     * @return bool
     */
    public function getIsLot()
    {
        return $this->container['is_lot'];
    }

    /**
     * Sets is_lot
     *
     * @param bool $is_lot Indicates if this tier represents a lot. See the documentation for more information about lots.
     *
     * @return $this
     */
    public function setIsLot($is_lot)
    {
        $this->container['is_lot'] = $is_lot;

        return $this;
    }

    /**
     * Gets increment
     *
     * @return int
     */
    public function getIncrement()
    {
        return $this->container['increment'];
    }

    /**
     * Sets increment
     *
     * @param int $increment This value is the increment, or step size, that should be used for new item numbers. It defaults to DEFAULT_INCREMENT, but can be changed to any other positive number greater than zero. Invalid values make this be set to one '1'
     *
     * @return $this
     */
    public function setIncrement($increment)
    {
        $this->container['increment'] = $increment;

        return $this;
    }

    /**
     * Gets tier_name
     *
     * @return string
     */
    public function getTierName()
    {
        return $this->container['tier_name'];
    }

    /**
     * Sets tier_name
     *
     * @param string $tier_name This is an optional name for the given tier
     *
     * @return $this
     */
    public function setTierName($tier_name)
    {
        $this->container['tier_name'] = $tier_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


